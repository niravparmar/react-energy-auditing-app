exports.up = function(knex, Promise) {
  return knex.schema
    .raw('ALTER TABLE `jobs` CHANGE `id` `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT')
    .raw('ALTER TABLE `accounts` CHANGE `id` `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT')
    .raw('ALTER TABLE `companies` CHANGE `id` `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT')
    .createTableIfNotExists('v5_attic', (t) => {
      t.uuid('uuid').primary()
      t.integer('job_id').notNullable().unsigned().index().references('jobs.id').onDelete('cascade')
      t.integer('order').notNullable()
      t.specificType('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP')
      t.specificType('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')
      t.specificType('deleted_at', 'TIMESTAMP NULL DEFAULT NULL')
      t.enu('attic_insulation_depth', ["", "0", "1-3", "4-6", "7-9", "10-12", "13-15", "16+", "Don\\'t Know"])
      t.enu('attic_insulation_type', ["", "Fiberglass or Rockwool (batts or blown)", "Cellulose", "Spray Foam", "Don\\'t Know"])
      t.enu('attic_insulation_type_improved', ["", "Fiberglass or Rockwool (batts or blown)", "Cellulose", "Spray Foam", "Don\\'t Know"])
      t.string('attic_modeled_attic_area')
      t.string('attic_modeled_attic_area_improved')
      t.string('attic_insulation')
      t.string('attic_insulation_improved')
      t.string('attic_knee_wall_area')
      t.string('attic_knee_wall_area_improved')
      t.string('attic_knee_wall_insulation')
      t.string('attic_knee_wall_insulation_improved')
      t.enu('attic_has_knee_wall', ["Yes", "No"])
      t.enu('attic_radiant_barrier', ["Yes", "No"])
      t.enu('attic_radiant_barrier_improved', ["Yes", "No"])
      t.integer('attic_percent')
      t.string('attic_roof_absorptance')
      t.string('attic_roof_absorptance_improved')
      t.string('attic_roof_emissivity')
      t.string('attic_roof_emissivity_improved')
      t.enu('attic_cool_roof', ["Yes", "No"])
    })
    .createTableIfNotExists('v5_dhw', (t) => {
      t.uuid('uuid').primary()
      t.integer('job_id').notNullable().unsigned().index().references('jobs.id').onDelete('cascade')
      t.integer('order').notNullable()
      t.specificType('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP')
      t.specificType('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')
      t.specificType('deleted_at', 'TIMESTAMP NULL DEFAULT NULL')
      t.enu('dhw_fuel', ["", "Electricity", "Natural Gas", "Fuel Oil", "Propane", "Solar", "None", "Don\\'t Know"])
      t.enu('dhw_type', ["", "Standard tank", "Tank with extra insulation", "Tankless (on-demand)", "Sidearm Tank (set EF manually)", "Don\\'t Know"])
      t.enu('dhw_age', ["", "0-5", "6-10", "11-15", "16-20", "21-25", "26-30", "31-35", "36+"])
      t.enu('dhw_location', ["", "Indoors and within heated area", "Garage or Unconditioned Space", "Outbuilding", "Don\\'t Know"])
      t.enu('dhw_temperature_settings', ["", "Low (120-130 F)", "Medium (130-140 F)", "High (140-150 F)", "Very High (150+ F)", "Don\\'t Know"])
      t.integer('dhw_energy_factor')
      t.integer('dhw_energy_factor_improved')
      t.integer('dhw_temp')
      t.integer('dhw_temp_improved')
      t.enu('dhw_manufacturer', ["", "Unknown", "A.O. Smith", "American", "Bosch", "Bradford White", "Bryant", "Comfort Maker", "GE", "Navien", "Noritz", "Rinnai", "Sears", "Rheem", "State Industries", "Stiebel Eltron", "Takaji", "Triangle Tube", "Other"])
      t.enu('dhw_manufacturer_improved', ["", "Unknown", "A.O. Smith", "American", "Bosch", "Bradford White", "Bryant", "Comfort Maker", "GE", "Navien", "Noritz", "Rinnai", "Sears", "Rheem", "State Industries", "Stiebel Eltron", "Takaji", "Triangle Tube", "Other"])
      t.string('dhw_model')
      t.string('dhw_model_improved')
      t.integer('dhw_model_year')
      t.integer('dhw_model_year_improved')
      t.enu('dhw_type_2', ["", "Tank Water Heater", "Tankless Water Heater", "Heat Pump"])
      t.enu('dhw_type_2_improved', ["", "Tank Water Heater", "Tankless Water Heater", "Heat Pump"])
      t.integer('dhw_percent_load')
      t.integer('dhw_percent_load_improved')
      t.enu('dhw_energy_star', ["Yes", "No"])
      t.enu('dhw_energy_star_improved', ["Yes", "No"])
      t.integer('dhw_heating_capacity')
      t.integer('dhw_heating_capacity_improved')
      t.integer('dhw_tank_size')
      t.integer('dhw_tank_size_improved')
      t.enu('dhw_fuel_2', ["", "Electricity", "Natural Gas", "Fuel Oil", "Propane", "Solar", "None"])
      t.enu('dhw_fuel_2_improved', ["", "Electricity", "Natural Gas", "Fuel Oil", "Propane", "Solar", "None"])
    })
    .createTableIfNotExists('v5_door', (t) => {
      t.uuid('uuid').primary()
      t.integer('job_id').notNullable().unsigned().index().references('jobs.id').onDelete('cascade')
      t.integer('order').notNullable()
      t.specificType('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP')
      t.specificType('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')
      t.specificType('deleted_at', 'TIMESTAMP NULL DEFAULT NULL')
      t.enu('door_type', ["", "Steel, hollow", "Steel, hollow with storm", "Steel, insulated", "Wood", "Wood with Storm", "Fiberglass"])
      t.string('door_u_value')
      t.string('door_u_value_improved')
      t.string('door_area')
      t.string('door_area_improved')
      t.enu('door_energy_star', ["Yes", "No"])
      t.enu('door_energy_star_improved', ["Yes", "No"])
    })
    .createTableIfNotExists('v5_freezer', (t) => {
      t.uuid('uuid').primary()
      t.integer('job_id').notNullable().unsigned().index().references('jobs.id').onDelete('cascade')
      t.integer('order').notNullable()
      t.specificType('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP')
      t.specificType('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')
      t.specificType('deleted_at', 'TIMESTAMP NULL DEFAULT NULL')
      t.string('freezer_usage')
      t.string('freezer_usage_improved')
      t.enu('freezer_manufacturer', ["", "Amana", "Unknown", "Asko", "Bosch", "Fridgidaire", "GE", "Igloo", "LG", "Maytag", "Samsung", "Sears", "Sub-Zero", "Thermador", "Whirlpool", "Other"])
      t.enu('freezer_manufacturer_improved', ["", "Amana", "Unknown", "Asko", "Bosch", "Fridgidaire", "GE", "Igloo", "LG", "Maytag", "Samsung", "Sears", "Sub-Zero", "Thermador", "Whirlpool", "Other"])
      t.integer('freezer_model_year')
      t.integer('freezer_model_year_improved')
      t.string('freezer_model')
      t.string('freezer_model_improved')
      t.string('freezer_name')
      t.enu('freezer_energy_star', ["Yes", "No"])
      t.enu('freezer_energy_star_improved', ["Yes", "No"])
    })
    .createTableIfNotExists('v5_hvac', (t) => {
      t.uuid('uuid').primary()
      t.integer('job_id').notNullable().unsigned().index().references('jobs.id').onDelete('cascade')
      t.integer('order').notNullable()
      t.specificType('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP')
      t.specificType('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')
      t.specificType('deleted_at', 'TIMESTAMP NULL DEFAULT NULL')
      t.string('hvac_system_name')
      t.enu('hvac_system_type', ["", "Heating", "Cooling", "Both"])
      t.enu('hvac_heating_equipment', ["", "Boiler", "Furnace", "Electric Resistance", "Direct Heater", "Stove or Insert", "Ductless Heat Pump", "Central Heat Pump"])
      t.enu('hvac_heating_equipment_improved', ["", "Boiler", "Furnace", "Electric Resistance", "Direct Heater", "Stove or Insert", "Ductless Heat Pump", "Central Heat Pump"])
      t.enu('hvac_heating_energy_source', ["", "None", "Electricity", "Natural Gas", "Propane", "Fuel Oil", "Pellets", "Wood", "Solar", "Don\\'t Know"])
      t.enu('hvac_heating_energy_source_improved', ["", "None", "Electricity", "Natural Gas", "Propane", "Fuel Oil", "Pellets", "Wood", "Solar", "Don\\'t Know"])
      t.integer('hvac_percent_of_total_heating_load')
      t.integer('hvac_percent_of_total_heating_load_improved')
      t.integer('hvac_heating_capacity')
      t.integer('hvac_heating_capacity_improved')
      t.enu('hvac_duct_location', ["", "Intentionally Conditioned Space", "Attic (unconditioned)", "Basement (unconditioned)", "Crawlspace (unconditioned)", "50/50 Attic - Basement (both unconditioned)", "50/50 Attic (unconditioned) - Conditioned Space", "50/50 Attic - Crawlspace (both unconditioned)", "50/50 Basement (unconditioned) - Conditioned Space", "50/50 Crawlspace (unconditioned) - Conditioned Space", "70/30 Conditioned Space - Garage (unconditioned)"])
      t.enu('hvac_duct_location_improved', ["", "Intentionally Conditioned Space", "Attic (unconditioned)", "Basement (unconditioned)", "Crawlspace (unconditioned)", "50/50 Attic - Basement (both unconditioned)", "50/50 Attic (unconditioned) - Conditioned Space", "50/50 Attic - Crawlspace (both unconditioned)", "50/50 Basement (unconditioned) - Conditioned Space", "50/50 Crawlspace (unconditioned) - Conditioned Space", "70/30 Conditioned Space - Garage (unconditioned)"])
      t.enu('hvac_duct_insulation', ["", "No Insulation", "Duct Board 1\"", "Duct Board 1.5\"", "Duct Board 2\"", "Fiberglass 1.25\"", "Fiberglass 2\"", "Fiberglass 2.5\"", "Reflective bubble wrap", "Measured (R Value)"])
      t.enu('hvac_duct_insulation_improved', ["No Insulation Improvement", "R-6 Duct Insulation", "R-8 Duct Insulation", "Measured (R Value) - add cost manually"])
      t.string('hvac_duct_leakage_value')
      t.string('hvac_duct_leakage_value_improved')
      t.string('hvac_duct_efficiency')
      t.string('hvac_duct_efficiency_improved')
      t.integer('hvac_percent_of_total_cooling_load')
      t.integer('hvac_percent_of_total_cooling_load_improved')
      t.enu('hvac_cooling_equipment', ["", "Central AC", "Room AC", "Central Heat Pump", "Evaporative Cooler (direct)", "Evaporative Cooler (ducted)", "Ductless Heat Pump", "None"])
      t.enu('hvac_cooling_equipment_improved', ["", "Central AC", "Room AC", "Central Heat Pump", "Evaporative Cooler (direct)", "Evaporative Cooler (ducted)", "Ductless Heat Pump", "None"])
      t.enu('hvac_dual_equipment', ["", "Central Heat Pump", "Furnace / Central AC"])
      t.integer('hvac_cooling_capacity')
      t.integer('hvac_cooling_capacity_improved')
      t.string('hvac_cooling_system_efficiency')
      t.string('hvac_cooling_system_efficiency_improved')
      t.string('hvac_heating_system_efficiency')
      t.string('hvac_heating_system_efficiency_improved')
      t.enu('hvac_duct_leakage', ["", "30% - Very leaky", "15% - Somewhat leaky", "6% - Well sealed", "3% - Very tight", "Measured (CFM25)"])
      t.enu('hvac_duct_leakage_improved', ["", "No Improvement", "Seal to 15% Leakage", "Seal to 6% Leakage", "Measured (cfm25) - add cost manually"])
      t.enu('hvac_cooling_system_manufacturer', ["", "Unknown", "AirEase", "Amana", "American Standard", "Bosch", "Bryant", "Carrier", "Coleman", "Comfort Maker", "Coolerado", "Daikin", "Day & Night", "Fridgidaire", "Fujitsu", "General Electric", "Goodman", "Janitrol", "Lennox", "LG", "Luxaire", "Mitsubishi", "Panasonic", "Payne", "Peerless", "Rheem", "RUUD", "Samsung", "Sears Kenmore", "Tappan", "Trane", "Utica", "York", "Other"])
      t.enu('hvac_cooling_system_manufacturer_improved', ["", "Unknown", "AirEase", "Amana", "American Standard", "Bosch", "Bryant", "Carrier", "Coleman", "Comfort Maker", "Coolerado", "Daikin", "Day & Night", "Fridgidaire", "Fujitsu", "General Electric", "Goodman", "Janitrol", "Lennox", "LG", "Luxaire", "Mitsubishi", "Panasonic", "Payne", "Peerless", "Rheem", "RUUD", "Samsung", "Sears Kenmore", "Tappan", "Trane", "Utica", "York", "Other"])
      t.string('hvac_cooling_system_model')
      t.string('hvac_cooling_system_model_improved')
      t.integer('hvac_cooling_system_model_year')
      t.integer('hvac_cooling_system_model_year_improved')
      t.enu('hvac_heating_system_manufacturer', ["", "Unknown", "AirEase", "Amana", "American Standard", "Bosch", "Bryant", "Carrier", "Coleman", "Comfort Master", "Daikin", "Day & Night", "Fujitsu", "General Electric", "Goodman", "Janitrol", "Lennox", "LG", "Luxaire", "Mitsubishi", "Payne", "Panasonic", "Peerless", "Rheem", "RUUD", "Samsung", "Sears Kenmore", "Tappan", "Trane", "Utica", "York", "Other"])
      t.enu('hvac_heating_system_manufacturer_improved', ["", "Unknown", "AirEase", "Amana", "American Standard", "Bosch", "Bryant", "Carrier", "Coleman", "Comfort Master", "Daikin", "Day & Night", "Fujitsu", "General Electric", "Goodman", "Janitrol", "Lennox", "LG", "Luxaire", "Mitsubishi", "Payne", "Panasonic", "Peerless", "Rheem", "RUUD", "Samsung", "Sears Kenmore", "Tappan", "Trane", "Utica", "York", "Other"])
      t.integer('hvac_heating_system_model_year')
      t.integer('hvac_heating_system_model_year_improved')
      t.string('hvac_heating_system_model')
      t.string('hvac_heating_system_model_improved')
      t.string('hvac_duct_insulation_value')
      t.string('hvac_duct_insulation_value_improved')
      t.enu('hvac_heat_pump_inverter', ["Yes", "No"])
      t.enu('hvac_heat_pump_inverter_improved', ["Yes", "No"])
      t.enu('hvac_upgrade_action', ["", "Replace with a newer model", "Keep an existing system as is", "Remove a system permanently", "Install a new non-existing system"])
      t.enu('hvac_system_equipment_type', ["", "Boiler", "Furnace with standalone ducts", "Electric Resistance", "Direct Heater", "Central AC with standalone ducts", "Room AC", "Evaporative Cooler - Direct", "Evaporative Cooler - Ducted", "Ductless Heat Pump", "Central Heat Pump", "Furnace / Central AC (shared ducts)", "Stove"])
    })
    .createTableIfNotExists('v5_refrigerator', (t) => {
      t.uuid('uuid').primary()
      t.integer('job_id').notNullable().unsigned().index().references('jobs.id').onDelete('cascade')
      t.integer('order').notNullable()
      t.specificType('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP')
      t.specificType('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')
      t.specificType('deleted_at', 'TIMESTAMP NULL DEFAULT NULL')
      t.enu('refrigerator_age', ["", "0-14", "15-21", "22-24", "25-26", "27-30", "31-34", "35-42", "42+", "Don\\'t Know"])
      t.enu('refrigerator_size', ["", "1-5", "6-12", "13-15", "16-18", "19-21", "22+", "Don\\'t Know"])
      t.string('refrigerator_name')
      t.string('refrigerator_usage')
      t.string('refrigerator_usage_improved')
      t.enu('refrigerator_manufacturer', ["", "Unknown", "Amana", "Asko", "Bosch", "Fridgidaire", "GE", "Hotpoint", "KitchenAid", "LG", "Maytag", "Samsung", "Sears", "Sub-Zero", "Thermador", "Whirlpool", "Fisher & Paykel", "Ikea", "Liebherr", "Other"])
      t.enu('refrigerator_manufacturer_improved', ["", "Unknown", "Amana", "Asko", "Bosch", "Fridgidaire", "GE", "Hotpoint", "KitchenAid", "LG", "Maytag", "Samsung", "Sears", "Sub-Zero", "Thermador", "Whirlpool", "Fisher & Paykel", "Ikea", "Liebherr", "Other"])
      t.string('refrigerator_model')
      t.string('refrigerator_model_improved')
      t.enu('refrigerator_energy_star', ["Yes", "No"])
      t.enu('refrigerator_energy_star_improved', ["Yes", "No"])
      t.integer('refrigerator_model_year')
      t.integer('refrigerator_model_year_improved')
    })
    .createTableIfNotExists('v5_vault', (t) => {
      t.uuid('uuid').primary()
      t.integer('job_id').notNullable().unsigned().index().references('jobs.id').onDelete('cascade')
      t.integer('order').notNullable()
      t.specificType('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP')
      t.specificType('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')
      t.specificType('deleted_at', 'TIMESTAMP NULL DEFAULT NULL')
      t.string('vault_modeled_vault_area')
      t.string('vault_modeled_vault_area_improved')
      t.string('vault_cavity_insulation')
      t.string('vault_cavity_insulation_improved')
      t.string('vault_continuous_insulation')
      t.string('vault_continuous_insulation_improved')
      t.enu('vault', ["Well", "Yes", "Poorly", "No"])
      t.integer('vault_percent')
      t.string('vault_roof_absorptance')
      t.string('vault_roof_absorptance_improved')
      t.string('vault_roof_emissivity')
      t.string('vault_roof_emissivity_improved')
      t.enu('vault_cool_roof', ["Yes", "No"])
    })
    .createTableIfNotExists('v5_wall', (t) => {
      t.uuid('uuid').primary()
      t.integer('job_id').notNullable().unsigned().index().references('jobs.id').onDelete('cascade')
      t.integer('order').notNullable()
      t.specificType('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP')
      t.specificType('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')
      t.specificType('deleted_at', 'TIMESTAMP NULL DEFAULT NULL')
      t.enu('wall_exterior_wall_siding', ["", "Brick Veneer", "Metal/vinyl siding", "Shingle/Composition", "Stone veneer", "Stucco", "Wood/Fiber Cement siding", "Other", "None", "Don\\'t Know"])
      t.enu('wall_exterior_wall_construction', ["", "Concrete Block", "Full Brick", "Frame", "Log", "Straw Bale", "Don\\'t Know"])
      t.enu('walls_insulated', ["Well", "Poorly", "Yes", "No"])
      t.string('wall_cavity_insulation')
      t.string('wall_cavity_insulation_improved')
      t.string('wall_continuous_insulation')
      t.string('wall_continuous_insulation_improved')
      t.string('wall_modeled_wall_area')
      t.string('wall_modeled_wall_area_improved')
      t.integer('wall_system_percent_of_total')
    })
    .createTableIfNotExists('v5_window', (t) => {
      t.uuid('uuid').primary()
      t.integer('job_id').notNullable().unsigned().index().references('jobs.id').onDelete('cascade')
      t.integer('order').notNullable()
      t.specificType('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP')
      t.specificType('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')
      t.specificType('deleted_at', 'TIMESTAMP NULL DEFAULT NULL')
      t.enu('window_type', ["", "Single pane", "Single pane + storm", "Double pane", "Double pane + low e", "Triple pane + low e", "Don\\'t Know"])
      t.enu('window_frame', ["", "Metal", "Vinyl", "Wood or metal clad", "Don\\'t Know"])
      t.integer('window_north_area_percent')
      t.string('window_efficiency')
      t.string('window_efficiency_improved')
      t.string('window_area_north')
      t.string('window_area_north_improved')
      t.string('window_area_east')
      t.string('window_area_east_improved')
      t.string('window_area_south')
      t.string('window_area_south_improved')
      t.string('window_area_west')
      t.string('window_area_west_improved')
      t.string('window_solar_heat_gain_coefficient')
      t.string('window_solar_heat_gain_coefficient_improved')
      t.integer('window_east_area_percent')
      t.integer('window_south_area_percent')
      t.integer('window_west_area_percent')
      t.string('window_north_overhang_depth')
      t.string('window_east_overhang_depth')
      t.string('window_south_overhang_depth')
      t.string('window_west_overhang_depth')
      t.enu('window_exterior_treatment_north', ["", "Insect Screen (full)", "Insect Screen (half)", "Solar Screen (summer only)", "Solar Screen (all year)", "Solar Shades, Vertical Roller (summer only)", "Solar Shades, Vertical Roller (all year)", "Solar Shades, Louvered (summer only)", "Solar Shades, Louvered (all year)", "Solar Film (all year)", "No Treatment"])
      t.enu('window_exterior_treatment_north_improved', ["", "No Improvement", "Insect Screen (half)", "Insect Screen (full)", "Solar Screen (summer only)", "Solar Screen (all year)", "Solar Shades, Vertical Roller (summer only)", "Solar Shades, Vertical Roller (all year)", "Solar Shades, Louvered (summer only)", "Solar Shades, Louvered (all year)", "Solar Film (all year)", "No Treatment"])
      t.enu('window_exterior_treatment_east', ["", "Insect Screen (full)", "Insect Screen (half)", "Solar Screen (summer only)", "Solar Screen (all year)", "Solar Shades, Vertical Roller (summer only)", "Solar Shades, Vertical Roller (all year)", "Solar Shades, Louvered (summer only)", "Solar Shades, Louvered (all year)", "Solar Film (all year)", "No Treatment"])
      t.enu('window_exterior_treatment_east_improved', ["", "No Improvement", "Insect Screen (half)", "Insect Screen (full)", "Solar Screen (summer only)", "Solar Screen (all year)", "Solar Shades, Vertical Roller (summer only)", "Solar Shades, Vertical Roller (all year)", "Solar Shades, Louvered (summer only)", "Solar Shades, Louvered (all year)", "Solar Film (all year)", "No Treatment"])
      t.enu('window_exterior_treatment_south', ["", "Insect Screen (full)", "Insect Screen (half)", "Solar Screen (summer only)", "Solar Screen (all year)", "Solar Shades, Vertical Roller (summer only)", "Solar Shades, Vertical Roller (all year)", "Solar Shades, Louvered (summer only)", "Solar Shades, Louvered (all year)", "Solar Film (all year)", "No Treatment"])
      t.enu('window_exterior_treatment_south_improved', ["", "No Improvement", "Insect Screen (half)", "Insect Screen (full)", "Solar Screen (summer only)", "Solar Screen (all year)", "Solar Shades, Vertical Roller (summer only)", "Solar Shades, Vertical Roller (all year)", "Solar Shades, Louvered (summer only)", "Solar Shades, Louvered (all year)", "Solar Film (all year)", "No Treatment"])
      t.enu('window_exterior_treatment_west', ["", "Insect Screen (full)", "Insect Screen (half)", "Solar Screen (summer only)", "Solar Screen (all year)", "Solar Shades, Vertical Roller (summer only)", "Solar Shades, Vertical Roller (all year)", "Solar Shades, Louvered (summer only)", "Solar Shades, Louvered (all year)", "Solar Film (all year)", "No Treatment"])
      t.enu('window_exterior_treatment_west_improved', ["", "No Improvement", "Insect Screen (half)", "Insect Screen (full)", "Solar Screen (summer only)", "Solar Screen (all year)", "Solar Shades, Vertical Roller (summer only)", "Solar Shades, Vertical Roller (all year)", "Solar Shades, Louvered (summer only)", "Solar Shades, Louvered (all year)", "Solar Film (all year)", "No Treatment"])
      t.enu('window_energy_star', ["Yes", "No"])
      t.enu('window_energy_star_improved', ["Yes", "No"])
    })
    .createTableIfNotExists('v5_caz', (t) => {
      t.uuid('uuid').primary()
      t.integer('job_id').notNullable().unsigned().index().references('jobs.id').onDelete('cascade')
      t.integer('order').notNullable()
      t.specificType('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP')
      t.specificType('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')
      t.specificType('deleted_at', 'TIMESTAMP NULL DEFAULT NULL')
      t.string('caz_name')
      t.integer('caz_ambient_co')
      t.integer('caz_poor_case_test')
      t.string('caz_notes')
      t.integer('caz_appliance_co_current_condition')
      t.integer('caz_max_ambient_co')
      t.integer('caz_appliance_co_poor_scenario')
      t.enu('caz_appliance_co_test_result', ["passed", "fail", "not tested"])
      t.enu('caz_appliance_co_test_result_improved', ["passed", "fail", "not tested"])
      t.integer('caz_appliance_flue_current_condition')
      t.integer('caz_appliance_flue_poor_condition')
      t.enu('caz_appliance_flue_test_result', ["passed", "fail", "not tested"])
      t.enu('caz_appliance_flue_test_result_improved', ["passed", "fail", "not tested"])
      t.integer('caz_appliance_spillage_current_condition')
      t.integer('caz_appliance_spillage_poor_condition')
      t.enu('caz_appliance_spillage_test_result', ["passed", "fail", "not tested"])
      t.enu('caz_appliance_spillage_test_result_improved', ["passed", "fail", "not tested"])
      t.enu('caz_appliance_vent_system_type', ["", "atmospheric", "induced draft", "power vented (at unit)", "power vented (at exterior)", "direct vented", "sealed combustion"])
      t.enu('caz_appliance_vent_system_type_improved', ["", "atmospheric", "induced draft", "power vented (at unit)", "power vented (at exterior)", "direct vented", "sealed combustion"])
      t.enu('caz_water_heater_orphaned', ["Yes", "No"])
      t.enu('caz_water_heater_orphaned_improved', ["Yes", "No"])
    })
    .createTableIfNotExists('v5_basedata', (t) => {
      t.integer('job_id').notNullable().unsigned().primary().references('jobs.id').onDelete('cascade')
      t.integer('year_built')
      t.string('conditioned_area')
      t.string('average_wall_height')
      t.string('house_length')
      t.string('house_width')
      t.string('floors_above_grade')
      t.string('number_of_occupants')
      t.enu('type_of_home', ["", "Apartment", "Condominium", "Single Family Detached", "Single Family Attached", "Mobile Home", "Don\\'t Know"])
      t.enu('front_of_building_orientation', ["", "North", "North East", "East", "South East", "South", "South West", "West", "North West"])
      t.enu('tuck_under_garage', ["Yes", "No"])
      t.enu('garage_size', ["1-car", "2-car", "3-car", "4-car", "5-car"])
      t.enu('programmable_thermostat_installed', ["Yes", "No"])
      t.string('heating_setpoint_high')
      t.string('heating_setpoint_high_improved')
      t.string('heating_setpoint_low')
      t.string('heating_setpoint_low_improved')
      t.string('cooling_setpoint_high')
      t.string('cooling_setpoint_high_improved')
      t.string('cooling_setpoint_low')
      t.string('cooling_setpoint_low_improved')
      t.enu('range_fuel_type', ["", "Natural Gas", "Electricity", "Propane", "None", "Don\\'t Know"])
      t.enu('dryer_fuel_type', ["", "Natural Gas", "Electricity", "Propane", "None", "Don\\'t Know"])
      t.integer('total_number_of_light_bulbs')
      t.integer('total_number_of_light_bulbs_improved')
      t.integer('shared_walls_north')
      t.integer('percent_of_ceilings_shared')
      t.integer('percent_of_floors_shared')
      t.integer('foundation_basement')
      t.string('foundation_above_grade_height')
      t.enu('basement_wall_insulation', ["", "None or Bare Walls", "Fiberglass blanket or batts on wall", "Finished wall without Insulation", "Finished wall with Insulation", "Don\\'t Know"])
      t.enu('crawlspace_insulation', ["", "Crawlspace has insulation installed on the exterior wall area", "Crawlspace has insulation installed under only the living space floor", "Crawlspace is uninsulated", "Don\\'t Know"])
      t.string('skylight_area')
      t.string('blower_door_reading')
      t.string('blower_door_reading_improved')
      t.string('equivalent_nach')
      t.string('equivalent_nach_improved')
      t.string('conditioned_air_volume')
      t.string('effective_leakage_area')
      t.string('effective_leakage_area_improved')
      t.string('equivalent_ach_50')
      t.string('equivalent_ach_50_improved')
      t.string('modeled_basement_wall_area')
      t.string('basement_cavity_insulation')
      t.string('basement_cavity_insulation_improved')
      t.string('basement_continuous_insulation')
      t.string('basement_continuous_insulation_improved')
      t.string('floor_cavity_insulation')
      t.string('floor_cavity_insulation_improved')
      t.string('floor_continuous_insulation')
      t.string('floor_continuous_insulation_improved')
      t.string('modeled_floor_area')
      t.integer('shared_walls_east')
      t.integer('shared_walls_south')
      t.integer('shared_walls_west')
      t.integer('foundation_crawlspace')
      t.integer('foundation_slab')
      t.enu('percent_cfls_or_leds', ["", "0%", "1-25%", "26-50%", "51-75%", "76-99%", "100%", "Don\\'t Know"])
      t.string('crawl_cavity_insulation')
      t.string('crawl_cavity_insulation_improved')
      t.string('crawl_wall_insulation')
      t.string('crawl_wall_insulation_improved')
      t.string('modeled_crawl_wall_area')
      t.string('modeled_crawl_floor_area')
      t.enu('crawlspace_type', ["Unvented - Unconditioned Crawl", "Vented - Year Round", "Vented - Summer Only", "Conditioned Crawl"])
      t.enu('crawlspace_type_improved', ["Unvented - Unconditioned Crawl", "Vented - Year Round", "Vented - Summer Only", "Conditioned Crawl"])
      t.enu('clothes_washer_type', ["", "Front Load", "Top Load", "No Clothes Washer"])
      t.enu('clothes_washer_type_improved', ["No Improvement", "Front Load", "Top Load", "No Clothes Washer"])
      t.enu('clothes_washer_energy_star', ["Yes", "No"])
      t.enu('clothes_washer_energy_star_improved', ["Yes", "No"])
      t.enu('clothes_washer_manufacturer', ["", "Unknown", "Amana", "Asko", "Bosch", "Fridgidaire", "GE", "Hotpoint", "LG", "Maytag", "Samsung", "Sears", "Westinghouse", "Whirlpool", "Other"])
      t.enu('clothes_washer_manufacturer_improved', ["", "Unknown", "Amana", "Asko", "Bosch", "Fridgidaire", "GE", "Hotpoint", "LG", "Maytag", "Samsung", "Sears", "Westinghouse", "Whirlpool", "Other"])
      t.string('clothes_washer_model')
      t.string('clothes_washer_model_improved')
      t.string('clothes_washer_mef')
      t.string('clothes_washer_mef_improved')
      t.enu('dishwasher_energy_star', ["Yes", "No"])
      t.enu('dishwasher_energy_star_improved', ["Yes", "No"])
      t.string('dishwasher_energy_factor')
      t.string('dishwasher_energy_factor_improved')
      t.enu('electrical', ["Passed", "Failed", "Warning", "Not Tested"])
      t.integer('percent_cfl_or_led')
      t.integer('percent_cfl_or_led_improved')
      t.enu('wind_zone', ["1", "2", "3", "4"]).defaultTo('2')
      t.enu('shielding', ["Well-Shielded", "Normal", "Exposed"]).defaultTo('Normal')
      t.string('n_factor')
      t.string('number_of_bedrooms')
      t.string('dishwasher_model')
      t.string('dishwasher_model_improved')
      t.enu('dishwasher_manufacturer', ["", "Unknown", "Amana", "Asko", "Bosch", "Fridgidaire", "GE", "Hotpoint", "KitchenAid", "LG", "Maytag", "Samsung", "Sears", "Thermador", "Whirlpool", "Other"])
      t.enu('dishwasher_manufacturer_improved', ["", "Unknown", "Amana", "Asko", "Bosch", "Fridgidaire", "GE", "Hotpoint", "KitchenAid", "LG", "Maytag", "Samsung", "Sears", "Thermador", "Whirlpool", "Other"])
      t.integer('dishwasher_model_year')
      t.integer('dishwasher_model_year_improved')
      t.integer('clothes_washer_model_year')
      t.integer('clothes_washer_model_year_improved')
      t.integer('number_of_incandescents')
      t.integer('number_of_incandescents_improved')
      t.integer('number_of_cfls_installed')
      t.integer('number_of_cfls_or_leds')
      t.integer('number_of_cfls_or_leds_improved')
      t.enu('hot_tub', ["Yes", "No"])
      t.enu('pool', ["Yes", "No"])
      t.enu('pool_pump_type', ["", "Single Speed", "Two Speed", "Variable Speed", "No Pool Pump"])
      t.enu('pool_pump_type_improved', ["", "Single Speed", "Two Speed", "Variable Speed", "No Pool Pump"])
      t.enu('pool_pump_horsepower', ["", "0.5", "0.75", "1", "1.5", "2", "3"])
      t.enu('pool_pump_horsepower_improved', ["", "0.5", "0.75", "1", "1.5", "2", "3"])
      t.enu('basement_heating', ["Intentional", "Intentional w/ continuous circulation", "Incidental-Desired (e.g. leaky ducts)", "None or Undesired Incidental"]).defaultTo('Intentional')
      t.enu('basement_heating_improved', ["Intentional", "Intentional w/ continuous circulation", "Incidental-Desired (e.g. leaky ducts)", "None or Undesired Incidental"]).defaultTo('Intentional')
      t.enu('basement_cooling', ["Intentional", "Intentional w/ continuous circulation", "Incidental-Desired (e.g. leaky ducts)", "None or Undesired Incidental"]).defaultTo('Intentional')
      t.enu('basement_cooling_improved', ["Intentional", "Intentional w/ continuous circulation", "Incidental-Desired (e.g. leaky ducts)", "None or Undesired Incidental"]).defaultTo('Intentional')
      t.integer('pool_size')
      t.string('pool_pump_turnover')
      t.string('pool_pump_turnover_improved')
      t.string('pool_pump_hours')
      t.string('pool_pump_hours_improved')
      t.enu('pool_pump_manufacturer', ["", "Pentair", "Other"])
      t.enu('pool_pump_manufacturer_improved', ["", "Pentair", "Other"])
      t.string('pool_pump_model')
      t.string('pool_pump_model_improved')
      t.integer('pool_pump_days_per_year')
      t.integer('pool_pump_days_per_year_improved')
      t.enu('dishwasher_installed', ["Yes", "No"])
      t.enu('dishwasher_installed_improved', ["No Improvement", "Yes", "No"])
      t.string('modeled_basement_floor_area')
      t.string('modeled_basement_perimeter')
      t.enu('includes_basement', ["Yes", "No"])
      t.string('utility_price_natural_gas')
      t.string('utility_price_propane')
      t.string('utility_price_fuel_oil')
      t.string('utility_price_electricity')
      t.integer('heating_design_load')
      t.integer('heating_design_load_improved')
      t.integer('cooling_sensible_design_load')
      t.integer('cooling_sensible_design_load_improved')
      t.integer('cooling_latent_design_load')
      t.integer('cooling_latent_design_load_improved')
      t.integer('design_temp_winter_outdoor')
      t.integer('design_temp_summer_outdoor')
      t.integer('design_temp_winter_indoor')
      t.integer('design_temp_summer_indoor')
      t.string('utility_price_wood')
      t.string('utility_price_pellets')
      t.string('number_of_units')
      t.integer('number_of_leds')
      t.integer('number_of_leds_improved')
      t.enu('pv', ["Yes", "No"])
      t.integer('pv_production')
      t.string('crawlspace_rim_joist_length')
      t.enu('crawlspace_rim_joist_treatment', ["Same as Crawl Wall", "Separately"]).defaultTo('Same as Crawl Wall')
      t.enu('crawlspace_rim_joist_treatment_improved', ["Same as Crawl Wall", "Separately"]).defaultTo('Same as Crawl Wall')
      t.integer('crawlspace_rim_joist_insulation')
      t.integer('crawlspace_rim_joist_insulation_improved')
      t.string('basement_rim_joist_length')
      t.enu('basement_rim_joist_treatment', ["Same as Basement Wall", "Separately"]).defaultTo('Same as Basement Wall')
      t.enu('basement_rim_joist_treatment_improved', ["Same as Basement Wall", "Separately"]).defaultTo('Same as Basement Wall')
      t.integer('basement_rim_joist_insulation')
      t.integer('basement_rim_joist_insulation_improved')
      t.string('demand_k_w')
      t.string('demand_k_w_improved')
      t.string('demand_k_w_savings')
    })
    .createTableIfNotExists('v5_concern', (t) => {
      t.uuid('uuid').primary()
      t.integer('job_id').notNullable().unsigned().index().references('jobs.id').onDelete('cascade')
      t.integer('order').notNullable()
      t.specificType('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP')
      t.specificType('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')
      t.specificType('deleted_at', 'TIMESTAMP NULL DEFAULT NULL')
      t.string('concern_summary')
      t.string('concern_detail')
    })
    .createTableIfNotExists('v5_health', (t) => {
      t.integer('job_id').notNullable().unsigned().primary().references('jobs.id').onDelete('cascade')
      t.enu('health_ambient_carbon_monoxide', ["Passed", "Failed", "Warning", "Not Tested"])
      t.enu('health_natural_condition_spillage', ["Passed", "Failed", "Warning", "Not Tested"])
      t.enu('health_worst_case_depressurization', ["Passed", "Failed", "Warning", "Not Tested"])
      t.enu('health_worst_case_spillage', ["Passed", "Failed", "Warning", "Not Tested"])
      t.enu('health_undiluted_flue_co', ["Passed", "Failed", "Warning", "Not Tested"])
      t.enu('health_draft_pressure', ["Passed", "Failed", "Warning", "Not Tested"])
      t.enu('health_gas_leak', ["Passed", "Failed", "Warning", "Not Tested"])
      t.enu('health_venting', ["Passed", "Failed", "Warning", "Not Tested"])
      t.enu('health_mold_moisture', ["Passed", "Failed", "Warning", "Not Tested"])
      t.enu('health_radon', ["Passed", "Failed", "Warning", "Not Tested"])
      t.enu('health_asbestos', ["Passed", "Failed", "Warning", "Not Tested"])
      t.enu('health_lead', ["Passed", "Failed", "Warning", "Not Tested"])
    })
}

exports.down = function(knex, Promise) {
  return knex.schema
    .dropTableIfExists('v5_attic')
    .dropTableIfExists('v5_dhw')
    .dropTableIfExists('v5_door')
    .dropTableIfExists('v5_freezer')
    .dropTableIfExists('v5_hvac')
    .dropTableIfExists('v5_refrigerator')
    .dropTableIfExists('v5_vault')
    .dropTableIfExists('v5_wall')
    .dropTableIfExists('v5_window')
    .dropTableIfExists('v5_caz')
    .dropTableIfExists('v5_basedata')
    .dropTableIfExists('v5_concern')
    .dropTableIfExists('v5_health')
    .then(() => knex('jobs').where({version: 5}).del())
}

