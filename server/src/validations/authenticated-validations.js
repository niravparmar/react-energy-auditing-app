import Joi from 'joi'
import {PAGE_SORT, ELEMENT_SORT, HPXML_STAGES} from '../../../modules/data/constants/constants'

const bool = Joi.any().only([0, 1, true, false])
const zipCode = Joi.string().length(5).regex(/[0-9]+/, 'zip code')
const requiredInt = Joi.number().integer().min(0).required()
const nullableInt = Joi.number().integer().min(0).allow(null)
const requiredUuid = Joi.string().guid().required()
const optionalUuid = Joi.string().guid()
const optionalInt = [Joi.valid('', null), Joi.number().integer().min(0)]
const optionalString = Joi.string().allow('', null)
const optionalNumber = Joi.number().allow(null)
const optionalVarchar = [optionalString, optionalNumber]
const nullableBoolean = Joi.any().only(null, true, false)

const numericRegex = [
  Joi.number(),
  Joi.any().only([null, '']),
  Joi.string().regex(/^-?([0-9]|\.)+$/, 'numeric value')
]

const HEALTH_OPTIONS = [null, "Passed", "Failed", "Warning", "Not Tested"]

const baseJob = Joi.object().keys({
  job_id: requiredInt
})
const unorderedColl = baseJob.keys({
  uuid: requiredUuid,
  deleted_at: Joi.date().allow(null)
})
const baseColl = unorderedColl.keys({
  order: Joi.number().integer().min(0)
})
const baseAttic = baseColl.keys({
  attic_insulation_depth: Joi.any().only([null, "", "0", "1-3", "4-6", "7-9", "10-12", "13-15", "16+", "Don't Know"]),
  attic_insulation_type: Joi.any().only([null, "", "Fiberglass or Rockwool (batts or blown)", "Cellulose", "Spray Foam", "Don't Know"]),
  attic_insulation_type_improved: Joi.any().only([null, "", "Fiberglass or Rockwool (batts or blown)", "Cellulose", "Spray Foam", "Don't Know"]),
  attic_modeled_attic_area: optionalVarchar,
  attic_modeled_attic_area_improved: optionalVarchar,
  attic_insulation: optionalVarchar,
  attic_insulation_improved: optionalVarchar,
  attic_knee_wall_area: optionalVarchar,
  attic_knee_wall_area_improved: optionalVarchar,
  attic_knee_wall_insulation: optionalVarchar,
  attic_knee_wall_insulation_improved: optionalVarchar,
  attic_knee_wall_continuous_insulation: optionalVarchar,
  attic_knee_wall_continuous_insulation_improved: optionalVarchar,
  attic_knee_wall_insulation_type: Joi.any().only([null, "", "Fiberglass or Rockwool Batt", "Blown Fiberglass or Rockwool", "Cellulose", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
  attic_knee_wall_insulation_type_improved: Joi.any().only([null, "", "Fiberglass or Rockwool Batt", "Blown Fiberglass or Rockwool", "Cellulose", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
  attic_knee_wall_continuous_insulation_type: Joi.any().only([null, "", "Rigid XPS", "Rigid EPS", "Rigid Polyisocyanurate", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
  attic_knee_wall_continuous_insulation_type_improved: Joi.any().only([null, "", "Rigid XPS", "Rigid EPS", "Rigid Polyisocyanurate", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
  attic_has_knee_wall: Joi.any().only([null, "Yes", "No"]),
  attic_has_knee_wall_improved: Joi.any().only([null, "Yes", "No"]),
  attic_radiant_barrier: Joi.any().only([null, "Yes", "No"]),
  attic_radiant_barrier_improved: Joi.any().only([null, "Yes", "No"]),
  attic_percent: optionalVarchar,
  attic_roof_absorptance: optionalVarchar,
  attic_roof_absorptance_improved: optionalVarchar,
  attic_roof_emissivity: optionalVarchar,
  attic_roof_emissivity_improved: optionalVarchar,
  attic_cool_roof: Joi.any().only([null, "Yes", "No"]),
  attic_cool_roof_improved: Joi.any().only([null, "Yes", "No"]),
  touched_fields: Joi.object({
    attic_insulation_type_improved: nullableBoolean,
    attic_modeled_attic_area: nullableBoolean,
    attic_modeled_attic_area_improved: nullableBoolean,
    attic_insulation: nullableBoolean,
    attic_insulation_improved: nullableBoolean,
    attic_insulation_depth: nullableBoolean,
    attic_insulation_depth_improved: nullableBoolean,
    attic_knee_wall_area: nullableBoolean,
    attic_knee_wall_area_improved: nullableBoolean,
    attic_knee_wall_insulation: nullableBoolean,
    attic_knee_wall_insulation_improved: nullableBoolean,
    attic_knee_wall_insulation_type: nullableBoolean,
    attic_knee_wall_insulation_type_improved: nullableBoolean,
    attic_knee_wall_continuous_insulation: nullableBoolean,
    attic_knee_wall_continuous_insulation_improved: nullableBoolean,
    attic_knee_wall_continuous_insulation_type: nullableBoolean,
    attic_knee_wall_continuous_insulation_type_improved: nullableBoolean,
    attic_radiant_barrier: nullableBoolean,
    attic_radiant_barrier_improved: nullableBoolean,
    attic_roof_absorptance: nullableBoolean,
    attic_roof_absorptance_improved: nullableBoolean,
    attic_roof_emissivity: nullableBoolean,
    attic_roof_emissivity_improved: nullableBoolean,
  }),
})
const baseDhw = baseColl.keys({
  dhw_fuel: Joi.any().only([null, "", "Electricity", "Natural Gas", "Fuel Oil", "Propane", "Solar", "None", "Don't Know"]),
  dhw_type: Joi.any().only([null, "", "Standard tank", "Tank with extra insulation", "Heat Pump", "Tankless (on-demand)", "Sidearm Tank (set EF manually)", "Don't Know"]),
  dhw_age: Joi.any().only([null, "", "0-5", "6-10", "11-15", "16-20", "21-25", "26-30", "31-35", "36+"]),
  dhw_location: Joi.any().only([null, "", "Indoors and within heated area", "Garage or Unconditioned Space", "Outbuilding", "Don't Know"]),
  dhw_temperature_settings: Joi.any().only([null, "", "Low (120-130 F)", "Medium (130-140 F)", "High (140-150 F)", "Very High (150+ F)", "Don't Know"]),
  dhw_energy_factor: optionalVarchar,
  dhw_energy_factor_improved: optionalVarchar,
  dhw_recovery_efficiency: optionalVarchar,
  dhw_recovery_efficiency_improved: optionalVarchar,
  dhw_temp: optionalVarchar,
  dhw_temp_improved: optionalVarchar,
  dhw_manufacturer: Joi.any().only([null, "", "Unknown", "A.O. Smith", "American", "Bosch", "Bradford White", "Bryant", "Comfort Maker", "GE", "Navien", "Noritz", "Rinnai", "Sears", "Rheem", "State Industries", "Stiebel Eltron", "Takaji", "Triangle Tube", "Other"]),
  dhw_manufacturer_improved: Joi.any().only([null, "", "Unknown", "A.O. Smith", "American", "Bosch", "Bradford White", "Bryant", "Comfort Maker", "GE", "Navien", "Noritz", "Rinnai", "Sears", "Rheem", "State Industries", "Stiebel Eltron", "Takaji", "Triangle Tube", "Other"]),
  dhw_model: optionalVarchar,
  dhw_model_improved: optionalVarchar,
  dhw_model_year: optionalVarchar,
  dhw_model_year_improved: optionalVarchar,
  dhw_type_2: Joi.any().only([null, "", "Tank Water Heater", "Tankless Water Heater", "Heat Pump"]),
  dhw_type_2_improved: Joi.any().only([null, "", "Tank Water Heater", "Tankless Water Heater", "Heat Pump"]),
  dhw_percent_load: numericRegex,
  dhw_percent_load_improved: numericRegex,
  dhw_energy_star: Joi.any().only([null, "Yes", "No"]),
  dhw_energy_star_improved: Joi.any().only([null, "Yes", "No"]),
  dhw_heating_capacity: optionalVarchar,
  dhw_heating_capacity_improved: optionalVarchar,
  dhw_tank_size: optionalVarchar,
  dhw_tank_size_improved: optionalVarchar,
  dhw_fuel_2: Joi.any().only([null, "", "Electricity", "Natural Gas", "Fuel Oil", "Propane", "Solar", "None"]),
  dhw_fuel_2_improved: Joi.any().only([null, "", "Electricity", "Natural Gas", "Fuel Oil", "Propane", "Solar", "None"]),
  touched_fields: Joi.object({
    dhw_energy_factor: nullableBoolean,
    dhw_energy_factor_improved: nullableBoolean,
    dhw_recovery_efficiency: nullableBoolean,
    dhw_recovery_efficiency_improved: nullableBoolean,
    dhw_temp: nullableBoolean,
    dhw_temp_improved: nullableBoolean,
    dhw_manufacturer: nullableBoolean,
    dhw_manufacturer_improved: nullableBoolean,
    dhw_model: nullableBoolean,
    dhw_model_improved: nullableBoolean,
    dhw_model_year: nullableBoolean,
    dhw_model_year_improved: nullableBoolean,
    dhw_type_2: nullableBoolean,
    dhw_type_2_improved: nullableBoolean,
    dhw_percent_load: nullableBoolean,
    dhw_percent_load_improved: nullableBoolean,
    dhw_energy_star_improved: nullableBoolean,
    dhw_heating_capacity: nullableBoolean,
    dhw_heating_capacity_improved: nullableBoolean,
    dhw_tank_size: nullableBoolean,
    dhw_tank_size_improved: nullableBoolean,
    dhw_fuel_2: nullableBoolean,
    dhw_fuel_2_improved: nullableBoolean,
  }),
})
const baseDoor = baseColl.keys({
  door_type: Joi.any().only([null, "", "Steel, hollow", "Steel, hollow with storm", "Steel, insulated", "Wood", "Wood with Storm", "Fiberglass", "Fiberglass with Storm", "Steel, insulated with Storm", "1/2-Lite Steel, insulated", "1/2-Lite Steel, insulated with Storm", "1/2-Lite Wood", "1/2-Lite Wood with Storm", "1/2-Lite Fiberglass", "1/2-Lite Fiberglass with Storm"]),
  door_u_value: optionalVarchar,
  door_u_value_improved: optionalVarchar,
  door_area: optionalVarchar,
  door_area_improved: optionalVarchar,
  door_energy_star: Joi.any().only([null, "Yes", "No"]),
  door_energy_star_improved: Joi.any().only([null, "Yes", "No"]),
  touched_fields: Joi.object({
    door_u_value: nullableBoolean,
    door_u_value_improved: nullableBoolean,
    door_area: nullableBoolean,
    door_area_improved: nullableBoolean,
    door_energy_star: nullableBoolean,
    door_energy_star_improved: nullableBoolean,
  }),
})
const baseFreezer = baseColl.keys({
  freezer_usage: optionalVarchar,
  freezer_usage_improved: optionalVarchar,
  freezer_manufacturer: Joi.any().only([null, "", "Amana", "Unknown", "Asko", "Bosch", "Fridgidaire", "GE", "Igloo", "LG", "Maytag", "Samsung", "Sears", "Sub-Zero", "Thermador", "Whirlpool", "Other"]),
  freezer_manufacturer_improved: Joi.any().only([null, "", "Amana", "Unknown", "Asko", "Bosch", "Fridgidaire", "GE", "Igloo", "LG", "Maytag", "Samsung", "Sears", "Sub-Zero", "Thermador", "Whirlpool", "Other"]),
  freezer_model_year: optionalVarchar,
  freezer_model_year_improved: optionalVarchar,
  freezer_model: optionalVarchar,
  freezer_model_improved: optionalVarchar,
  freezer_name: optionalVarchar,
  freezer_energy_star: Joi.any().only([null, "Yes", "No"]),
  freezer_energy_star_improved: Joi.any().only([null, "Yes", "No"]),
  touched_fields: Joi.object({
    freezer_usage: nullableBoolean,
    freezer_usage_improved: nullableBoolean,
    freezer_manufacturer: nullableBoolean,
    freezer_manufacturer_improved: nullableBoolean,
    freezer_model_year: nullableBoolean,
    freezer_model_year_improved: nullableBoolean,
    freezer_model: nullableBoolean,
    freezer_model_improved: nullableBoolean,
    freezer_energy_star: nullableBoolean,
    freezer_energy_star_improved: nullableBoolean,
  }),
})
const cazSystem = unorderedColl.keys({
  caz_appliance_co_current_condition: optionalVarchar,
  caz_appliance_co_current_condition_improved: optionalVarchar,
  caz_appliance_co_poor_scenario: optionalVarchar,
  caz_appliance_co_poor_scenario_improved: optionalVarchar,
  caz_appliance_co_test_result: Joi.any().only([null, "", "Passed", "Fail", "Not Tested"]),
  caz_appliance_co_test_result_improved: Joi.any().only([null, "", "Passed", "Fail", "Not Tested"]),
  caz_appliance_spillage_current_condition: optionalVarchar,
  caz_appliance_spillage_current_condition_improved: optionalVarchar,
  caz_appliance_spillage_poor_condition: optionalVarchar,
  caz_appliance_spillage_poor_condition_improved: optionalVarchar,
  caz_appliance_spillage_test_result: Joi.any().only([null, "Passed", "Fail", "Not Tested"]),
  caz_appliance_spillage_test_result_improved: Joi.any().only([null, "Passed", "Fail", "Not Tested"]),
  caz_appliance_vent_system_type: Joi.any().only([null, "", "Atmospheric", "Induced Draft", "Power Vented (at unit)", "Power Vented (at exterior)", "Direct Vented", "Sealed Combustion"]),
  caz_appliance_vent_system_type_improved: Joi.any().only([null, "", "Atmospheric", "Induced Draft", "Power Vented (at unit)", "Power Vented (at exterior)", "Direct Vented", "Sealed Combustion"]),
  caz_water_heater_orphaned: Joi.any().only([null, "Yes", "No"]),
  caz_water_heater_orphaned_improved: Joi.any().only([null, "Yes", "No"]),
  caz_fuel_leaks_identified: Joi.any().only([null, "Yes", "No"]),
  caz_fuel_leaks_identified_improved: Joi.any().only([null, "Yes", "No"]),
  caz_fuel_leaks_addressed: Joi.any().only([null, "Yes", "No"]),
  caz_fuel_leaks_addressed_improved: Joi.any().only([null, "Yes", "No"]),
})

// Appliances:

const applianceFuelBase = Joi.any().only([null, "", "Natural Gas", "Electricity", "Propane", "None", "Don't Know"])
const applianceFuelImp = Joi.any().only([null, "", "Natural Gas", "Electricity", "Propane", "None"])

const baseRange = baseColl.keys({
  range_fuel_type: applianceFuelBase,
  range_fuel_type_improved: applianceFuelImp,
})
const basePV = baseColl.keys({
  pv: Joi.any().only([null, "Yes", "No"]),
  pv_improved: Joi.any().only([null, "No Improvement", "New System"]),
  pv_array_size: optionalNumber,
  pv_array_size_improved: optionalNumber,
  pv_array_slope: optionalInt,
  pv_array_slope_improved: optionalInt,
  pv_array_orientation: optionalInt,
  pv_array_orientation_improved: optionalInt,
  pv_module_year: optionalInt,
  pv_annual_production: optionalInt,
  pv_annual_production_improved: optionalInt,
  touched_fields: Joi.object({
    pv: nullableBoolean,
    pv_improved: nullableBoolean,
    pv_array_size: nullableBoolean,
    pv_array_size_improved: nullableBoolean,
    pv_array_slope: nullableBoolean,
    pv_array_slope_improved: nullableBoolean,
    pv_array_orientation: nullableBoolean,
    pv_array_orientation_improved: nullableBoolean,
    pv_module_year: nullableBoolean,
    pv_annual_production: nullableBoolean,
    pv_annual_production_improved: nullableBoolean
  }),
})
const baseOven = baseColl.keys({
  oven_fuel_type: applianceFuelBase,
  oven_fuel_type_improved: applianceFuelImp,
})
const baseClothesDryer = baseColl.keys({
  clothes_dryer_fuel_type: applianceFuelBase,
  clothes_dryer_fuel_type_improved: applianceFuelImp,
})

const hvacSystemEquipmentType = Joi.any().only([null, "",
  "Boiler",
  "Furnace with standalone ducts",
  "Electric Resistance",
  "Direct Heater",
  "Stove or Insert",
  "Central AC with standalone ducts",
  "Room AC",
  "Evaporative Cooler - Direct",
  "Evaporative Cooler - Ducted",
  "Ductless Heat Pump",
  "Central Heat Pump (shared ducts)",
  "Furnace / Central AC (shared ducts)",
  "Solar Thermal",
  "Stove"
])

const hvacUpgradeAction = Joi.any().only(["Replace with a newer model", "Keep an existing system as is", "Remove a system permanently", "Install a new non-existing system"])

const baseHvac = baseColl.keys({
  hvac_system_name: optionalVarchar,
  hvac_heating_energy_source: Joi.any().only([null, "", "None", "Electricity", "Natural Gas", "Propane", "Fuel Oil", "Pellets", "Wood", "Solar", "Don't Know"]),
  hvac_heating_energy_source_improved: Joi.any().only([null, "", "None", "Electricity", "Natural Gas", "Propane", "Fuel Oil", "Pellets", "Wood", "Solar", "Don't Know"]),
  hvac_percent_of_total_heating_load: optionalVarchar,
  hvac_percent_of_total_heating_load_improved: optionalVarchar,
  hvac_heating_capacity: optionalNumber,
  hvac_heating_capacity_improved: optionalNumber,
  hvac_duct_location: Joi.any().only([null, "", "Intentionally Conditioned Space", "Attic (unconditioned)", "Basement (unconditioned)", "Crawlspace (unconditioned)", "50/50 Attic - Basement (both unconditioned)", "50/50 Attic (unconditioned) - Conditioned Space", "50/50 Attic - Crawlspace (both unconditioned)", "50/50 Basement (unconditioned) - Conditioned Space", "50/50 Crawlspace (unconditioned) - Conditioned Space", "70/30 Conditioned Space - Garage (unconditioned)"]),
  hvac_duct_location_improved: Joi.any().only([null, "", "Intentionally Conditioned Space", "Attic (unconditioned)", "Basement (unconditioned)", "Crawlspace (unconditioned)", "50/50 Attic - Basement (both unconditioned)", "50/50 Attic (unconditioned) - Conditioned Space", "50/50 Attic - Crawlspace (both unconditioned)", "50/50 Basement (unconditioned) - Conditioned Space", "50/50 Crawlspace (unconditioned) - Conditioned Space", "70/30 Conditioned Space - Garage (unconditioned)"]),
  hvac_duct_insulation: Joi.any().only([null, "", "No Insulation", "Duct Board 1\"", "Duct Board 1.5\"", "Duct Board 2\"", "Fiberglass 1.25\"", "Fiberglass 2\"", "Fiberglass 2.5\"", "Reflective bubble wrap", "Measured (R Value)"]),
  hvac_duct_insulation_improved: Joi.any().only([null, "", "No Insulation Improvement", "R-6 Duct Insulation", "R-8 Duct Insulation", "Measured (R Value) - add cost manually"]),
  hvac_duct_leakage_value: optionalNumber,
  hvac_duct_leakage_value_improved: optionalNumber,
  hvac_duct_efficiency: optionalVarchar,
  hvac_duct_efficiency_improved: optionalVarchar,
  hvac_percent_of_total_cooling_load: optionalVarchar,
  hvac_percent_of_total_cooling_load_improved: optionalVarchar,
  hvac_cooling_capacity: optionalVarchar,
  hvac_cooling_capacity_improved: optionalVarchar,
  hvac_cooling_system_efficiency: optionalVarchar,
  hvac_cooling_system_efficiency_improved: optionalVarchar,
  hvac_heating_system_efficiency: optionalVarchar,
  hvac_heating_system_efficiency_improved: optionalVarchar,
  hvac_duct_leakage: Joi.any().only([null, "", "30% - Very leaky", "15% - Somewhat leaky", "6% - Well sealed", "3% - Very tight", "Measured (CFM25)"]),
  hvac_duct_leakage_improved: Joi.any().only([null, "", "No Improvement", "50% Reduction", "Seal to 15% Leakage", "Seal to 6% Leakage", "6% - Well sealed", "3% - Very tight", "Measured (cfm25) - add cost manually"]),
  hvac_cooling_system_manufacturer: Joi.any().only([null, "", "Unknown", "AirEase", "Amana", "American Standard", "Bosch", "Bryant", "Carrier", "Coleman", "Comfort Maker", "Coolerado", "Daikin", "Day & Night", "Fridgidaire", "Fujitsu", "General Electric", "Goodman", "Janitrol", "Lennox", "LG", "Luxaire", "Mitsubishi", "Panasonic", "Payne", "Peerless", "Rheem", "RUUD", "Samsung", "Sears Kenmore", "Tappan", "Trane", "Utica", "York", "Other"]),
  hvac_cooling_system_manufacturer_improved: Joi.any().only([null, "", "Unknown", "AirEase", "Amana", "American Standard", "Bosch", "Bryant", "Carrier", "Coleman", "Comfort Maker", "Coolerado", "Daikin", "Day & Night", "Fridgidaire", "Fujitsu", "General Electric", "Goodman", "Janitrol", "Lennox", "LG", "Luxaire", "Mitsubishi", "Panasonic", "Payne", "Peerless", "Rheem", "RUUD", "Samsung", "Sears Kenmore", "Tappan", "Trane", "Utica", "York", "Other"]),
  hvac_cooling_system_model: optionalVarchar,
  hvac_cooling_system_model_improved: optionalVarchar,
  hvac_cooling_system_model_year: optionalVarchar,
  hvac_cooling_system_model_year_improved: optionalVarchar,
  hvac_heating_system_manufacturer: Joi.any().only([null, "", "Unknown", "AirEase", "Amana", "American Standard", "Bosch", "Bryant", "Carrier", "Coleman", "Comfort Master", "Daikin", "Day & Night", "Fujitsu", "General Electric", "Goodman", "Janitrol", "Lennox", "LG", "Luxaire", "Mitsubishi", "Payne", "Panasonic", "Peerless", "Rheem", "RUUD", "Samsung", "Sears Kenmore", "Tappan", "Trane", "Utica", "York", "Other"]),
  hvac_heating_system_manufacturer_improved: Joi.any().only([null, "", "Unknown", "AirEase", "Amana", "American Standard", "Bosch", "Bryant", "Carrier", "Coleman", "Comfort Master", "Daikin", "Day & Night", "Fujitsu", "General Electric", "Goodman", "Janitrol", "Lennox", "LG", "Luxaire", "Mitsubishi", "Payne", "Panasonic", "Peerless", "Rheem", "RUUD", "Samsung", "Sears Kenmore", "Tappan", "Trane", "Utica", "York", "Other"]),
  hvac_heating_system_model_year: optionalVarchar,
  hvac_heating_system_model_year_improved: optionalVarchar,
  hvac_heating_system_model: optionalVarchar,
  hvac_heating_system_model_improved: optionalVarchar,
  hvac_duct_insulation_value: optionalVarchar,
  hvac_duct_insulation_value_improved: optionalVarchar,
  hvac_heat_pump_inverter: Joi.any().only([null, "Yes", "No"]),
  hvac_heat_pump_inverter_improved: Joi.any().only([null, "Yes", "No"]),
  hvac_upgrade_action: hvacUpgradeAction,
  hvac_system_equipment_type: hvacSystemEquipmentType,
  touched_fields: Joi.object({
    hvac_heating_energy_source_improved: nullableBoolean,
    hvac_percent_of_total_heating_load_improved: nullableBoolean,
    hvac_heating_capacity: nullableBoolean,
    hvac_heating_capacity_improved: nullableBoolean,
    hvac_duct_location: nullableBoolean,
    hvac_duct_location_improved: nullableBoolean,
    hvac_duct_insulation: nullableBoolean,
    hvac_duct_insulation_improved: nullableBoolean,
    hvac_duct_leakage_value: nullableBoolean,
    hvac_duct_leakage_value_improved: nullableBoolean,
    hvac_duct_efficiency: nullableBoolean,
    hvac_duct_efficiency_improved: nullableBoolean,
    hvac_percent_of_total_cooling_load: nullableBoolean,
    hvac_percent_of_total_cooling_load_improved: nullableBoolean,
    hvac_cooling_capacity: nullableBoolean,
    hvac_cooling_capacity_improved: nullableBoolean,
    hvac_cooling_system_efficiency: nullableBoolean,
    hvac_cooling_system_efficiency_improved: nullableBoolean,
    hvac_heating_system_efficiency: nullableBoolean,
    hvac_heating_system_efficiency_improved: nullableBoolean,
    hvac_duct_leakage: nullableBoolean,
    hvac_duct_leakage_improved: nullableBoolean,
    hvac_cooling_system_manufacturer: nullableBoolean,
    hvac_cooling_system_manufacturer_improved: nullableBoolean,
    hvac_cooling_system_model: nullableBoolean,
    hvac_cooling_system_model_improved: nullableBoolean,
    hvac_cooling_system_model_year: nullableBoolean,
    hvac_cooling_system_model_year_improved: nullableBoolean,
    hvac_heating_system_manufacturer: nullableBoolean,
    hvac_heating_system_manufacturer_improved: nullableBoolean,
    hvac_heating_system_model_year: nullableBoolean,
    hvac_heating_system_model_year_improved: nullableBoolean,
    hvac_heating_system_model: nullableBoolean,
    hvac_heating_system_model_improved: nullableBoolean,
    hvac_duct_insulation_value: nullableBoolean,
    hvac_duct_insulation_value_improved: nullableBoolean,
    hvac_heat_pump_inverter: nullableBoolean,
    hvac_heat_pump_inverter_improved: nullableBoolean,
  }),
})
const baseRefrigerator = baseColl.keys({
  refrigerator_age: Joi.any().only([null, "", "0-14", "15-21", "22-24", "25-26", "27-30", "31-34", "35-42", "42+", "Don't Know"]),
  refrigerator_size: Joi.any().only([null, "", "1-5", "6-12", "13-15", "16-18", "19-21", "22+", "Don't Know"]),
  refrigerator_name: optionalVarchar,
  refrigerator_usage: optionalVarchar,
  refrigerator_usage_improved: optionalVarchar,
  refrigerator_manufacturer: Joi.any().only([null, "", "Unknown", "Amana", "Asko", "Bosch", "Fridgidaire", "GE", "Hotpoint", "KitchenAid", "LG", "Maytag", "Samsung", "Sears", "Sub-Zero", "Thermador", "Whirlpool", "Fisher & Paykel", "Ikea", "Liebherr", "Other"]),
  refrigerator_manufacturer_improved: Joi.any().only([null, "", "Unknown", "Amana", "Asko", "Bosch", "Fridgidaire", "GE", "Hotpoint", "KitchenAid", "LG", "Maytag", "Samsung", "Sears", "Sub-Zero", "Thermador", "Whirlpool", "Fisher & Paykel", "Ikea", "Liebherr", "Other"]),
  refrigerator_model: optionalVarchar,
  refrigerator_model_improved: optionalVarchar,
  refrigerator_energy_star: Joi.any().only([null, "Yes", "No"]),
  refrigerator_energy_star_improved: Joi.any().only([null, "Yes", "No"]),
  refrigerator_model_year: optionalVarchar,
  refrigerator_model_year_improved: optionalVarchar,
  touched_fields: Joi.object({
    refrigerator_usage: nullableBoolean,
    refrigerator_usage_improved: nullableBoolean,
    refrigerator_manufacturer: nullableBoolean,
    refrigerator_manufacturer_improved: nullableBoolean,
    refrigerator_model: nullableBoolean,
    refrigerator_model_improved: nullableBoolean,
    refrigerator_energy_star: nullableBoolean,
    refrigerator_energy_star_improved: nullableBoolean,
    refrigerator_model_year: nullableBoolean,
    refrigerator_model_year_improved: nullableBoolean,
  }),
})
const baseVault = baseColl.keys({
  vault_modeled_vault_area: optionalVarchar,
  vault_modeled_vault_area_improved: optionalVarchar,
  vault_cavity_insulation: optionalVarchar,
  vault_cavity_insulation_improved: optionalVarchar,
  vault_continuous_insulation: optionalVarchar,
  vault_continuous_insulation_improved: optionalVarchar,
  vault_cavity_insulation_type: Joi.any().only([null, "", "Fiberglass or Rockwool Batt", "Blown Fiberglass or Rockwool", "Cellulose", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
  vault_cavity_insulation_type_improved: Joi.any().only([null, "", "Fiberglass or Rockwool Batt", "Blown Fiberglass or Rockwool", "Cellulose", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
  vault_continuous_insulation_type: Joi.any().only([null, "", "Rigid XPS", "Rigid EPS", "Rigid Polyisocyanurate", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
  vault_continuous_insulation_type_improved: Joi.any().only([null, "", "Rigid XPS", "Rigid EPS", "Rigid Polyisocyanurate", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
  vault: Joi.any().only([null, "Well", "Yes", "Poorly", "No"]),
  vault_percent: optionalVarchar,
  vault_roof_absorptance: optionalVarchar,
  vault_roof_absorptance_improved: optionalVarchar,
  vault_roof_emissivity: optionalVarchar,
  vault_roof_emissivity_improved: optionalVarchar,
  vault_cool_roof: Joi.any().only([null, "Yes", "No"]),
  vault_cool_roof_improved: Joi.any().only([null, "Yes", "No"]),
  touched_fields: Joi.object({
    vault_modeled_vault_area: nullableBoolean,
    vault_modeled_vault_area_improved: nullableBoolean,
    vault_cavity_insulation: nullableBoolean,
    vault_cavity_insulation_improved: nullableBoolean,
    vault_continuous_insulation: nullableBoolean,
    vault_continuous_insulation_improved: nullableBoolean,
    vault_roof_absorptance: nullableBoolean,
    vault_roof_absorptance_improved: nullableBoolean,
    vault_roof_emissivity: nullableBoolean,
    vault_roof_emissivity_improved: nullableBoolean,
    vault_cavity_insulation_type: nullableBoolean,
    vault_cavity_insulation_type_improved: nullableBoolean,
    vault_continuous_insulation_type: nullableBoolean,
    vault_continuous_insulation_type_improved: nullableBoolean,
  }),
})
const baseWall = baseColl.keys({
  wall_exterior_wall_siding: Joi.any().only([null, "", "Brick Veneer", "Metal/vinyl siding", "Shingle/Composition", "Stone veneer", "Stucco", "Wood/Fiber Cement siding", "Other", "None", "Don't Know"]),
  wall_exterior_wall_construction: Joi.any().only([null, "", "Concrete Block", "Full Brick", "2x4 Frame", "2x6 Frame", "Log", "Straw Bale", "Don't Know"]),
  walls_insulated: Joi.any().only([null, "Well", "Poorly", "Yes", "No"]),
  wall_cavity_insulation: optionalVarchar,
  wall_cavity_insulation_improved: optionalVarchar,
  wall_continuous_insulation: optionalVarchar,
  wall_continuous_insulation_improved: optionalVarchar,
  wall_cavity_insulation_type: Joi.any().only([null, "", "Fiberglass or Rockwool Batt", "Blown Fiberglass or Rockwool", "Cellulose", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
  wall_cavity_insulation_type_improved: Joi.any().only([null, "", "Fiberglass or Rockwool Batt", "Blown Fiberglass or Rockwool", "Cellulose", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
  wall_continuous_insulation_type: Joi.any().only([null, "", "Rigid XPS", "Rigid EPS", "Rigid Polyisocyanurate", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
  wall_continuous_insulation_type_improved: Joi.any().only([null, "", "Rigid XPS", "Rigid EPS", "Rigid Polyisocyanurate", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
  wall_modeled_wall_area: optionalVarchar,
  wall_modeled_wall_area_improved: optionalVarchar,
  wall_system_percent_of_total: optionalVarchar,
  touched_fields: Joi.object({
    wall_cavity_insulation: nullableBoolean,
    wall_cavity_insulation_improved: nullableBoolean,
    wall_continuous_insulation: nullableBoolean,
    wall_continuous_insulation_improved: nullableBoolean,
    wall_cavity_insulation_type: nullableBoolean,
    wall_cavity_insulation_type_improved: nullableBoolean,
    wall_continuous_insulation_type: nullableBoolean,
    wall_continuous_insulation_type_improved: nullableBoolean,
    wall_modeled_wall_area: nullableBoolean,
    wall_modeled_wall_area_improved: nullableBoolean,
  }),
})
const baseWindow = baseColl.keys({
  window_improvements: Joi.any().only([null, "", "Yes", "No Improvement"]),
  window_improvements_improved: Joi.any().only([null, "", "Yes", "No Improvement"]),
  window_type: Joi.any().only([null, "", "Single pane", "Single pane + storm", "Double pane", "Double pane + low e", "Triple pane + low e", "Don't Know"]),
  window_frame: Joi.any().only([null, "", "Metal", "Vinyl", "Wood or metal clad", "Don't Know"]),
  window_north_area_percent: optionalVarchar,
  window_efficiency: optionalVarchar,
  window_efficiency_improved: optionalVarchar,
  window_area_north: optionalVarchar,
  window_area_north_improved: optionalVarchar,
  window_area_east: optionalVarchar,
  window_area_east_improved: optionalVarchar,
  window_area_south: optionalVarchar,
  window_area_south_improved: optionalVarchar,
  window_area_west: optionalVarchar,
  window_area_west_improved: optionalVarchar,
  window_solar_heat_gain_coefficient: optionalVarchar,
  window_solar_heat_gain_coefficient_improved: optionalVarchar,
  window_east_area_percent: optionalVarchar,
  window_south_area_percent: optionalVarchar,
  window_west_area_percent: optionalVarchar,
  window_north_overhang_depth: optionalVarchar,
  window_east_overhang_depth: optionalVarchar,
  window_south_overhang_depth: optionalVarchar,
  window_west_overhang_depth: optionalVarchar,
  window_exterior_treatment_north: Joi.any().only([null, "", "Insect Screen (full)", "Insect Screen (half)", "Solar Screen (summer only)", "Solar Screen (all year)", "Solar Shades, Vertical Roller (summer only)", "Solar Shades, Vertical Roller (all year)", "Solar Shades, Louvered (summer only)", "Solar Shades, Louvered (all year)", "Solar Film (all year)", "No Treatment"]),
  window_exterior_treatment_north_improved: Joi.any().only([null, "", "No Improvement", "Insect Screen (half)", "Insect Screen (full)", "Solar Screen (summer only)", "Solar Screen (all year)", "Solar Shades, Vertical Roller (summer only)", "Solar Shades, Vertical Roller (all year)", "Solar Shades, Louvered (summer only)", "Solar Shades, Louvered (all year)", "Solar Film (all year)", "No Treatment"]),
  window_exterior_treatment_east: Joi.any().only([null, "", "Insect Screen (full)", "Insect Screen (half)", "Solar Screen (summer only)", "Solar Screen (all year)", "Solar Shades, Vertical Roller (summer only)", "Solar Shades, Vertical Roller (all year)", "Solar Shades, Louvered (summer only)", "Solar Shades, Louvered (all year)", "Solar Film (all year)", "No Treatment"]),
  window_exterior_treatment_east_improved: Joi.any().only([null, "", "No Improvement", "Insect Screen (half)", "Insect Screen (full)", "Solar Screen (summer only)", "Solar Screen (all year)", "Solar Shades, Vertical Roller (summer only)", "Solar Shades, Vertical Roller (all year)", "Solar Shades, Louvered (summer only)", "Solar Shades, Louvered (all year)", "Solar Film (all year)", "No Treatment"]),
  window_exterior_treatment_south: Joi.any().only([null, "", "Insect Screen (full)", "Insect Screen (half)", "Solar Screen (summer only)", "Solar Screen (all year)", "Solar Shades, Vertical Roller (summer only)", "Solar Shades, Vertical Roller (all year)", "Solar Shades, Louvered (summer only)", "Solar Shades, Louvered (all year)", "Solar Film (all year)", "No Treatment"]),
  window_exterior_treatment_south_improved: Joi.any().only([null, "", "No Improvement", "Insect Screen (half)", "Insect Screen (full)", "Solar Screen (summer only)", "Solar Screen (all year)", "Solar Shades, Vertical Roller (summer only)", "Solar Shades, Vertical Roller (all year)", "Solar Shades, Louvered (summer only)", "Solar Shades, Louvered (all year)", "Solar Film (all year)", "No Treatment"]),
  window_exterior_treatment_west: Joi.any().only([null, "", "Insect Screen (full)", "Insect Screen (half)", "Solar Screen (summer only)", "Solar Screen (all year)", "Solar Shades, Vertical Roller (summer only)", "Solar Shades, Vertical Roller (all year)", "Solar Shades, Louvered (summer only)", "Solar Shades, Louvered (all year)", "Solar Film (all year)", "No Treatment"]),
  window_exterior_treatment_west_improved: Joi.any().only([null, "", "No Improvement", "Insect Screen (half)", "Insect Screen (full)", "Solar Screen (summer only)", "Solar Screen (all year)", "Solar Shades, Vertical Roller (summer only)", "Solar Shades, Vertical Roller (all year)", "Solar Shades, Louvered (summer only)", "Solar Shades, Louvered (all year)", "Solar Film (all year)", "No Treatment"]),
  window_energy_star: Joi.any().only([null, "Yes", "No"]),
  window_energy_star_improved: Joi.any().only([null, "Yes", "No"]),
  touched_fields: Joi.object({
    window_efficiency: nullableBoolean,
    window_efficiency_improved: nullableBoolean,
    window_area_north: nullableBoolean,
    window_area_north_improved: nullableBoolean,
    window_area_east: nullableBoolean,
    window_area_east_improved: nullableBoolean,
    window_area_south: nullableBoolean,
    window_area_south_improved: nullableBoolean,
    window_area_west: nullableBoolean,
    window_area_west_improved: nullableBoolean,
    window_solar_heat_gain_coefficient: nullableBoolean,
    window_solar_heat_gain_coefficient_improved: nullableBoolean,
    window_exterior_treatment_north: nullableBoolean,
    window_exterior_treatment_north_improved: nullableBoolean,
    window_exterior_treatment_east: nullableBoolean,
    window_exterior_treatment_east_improved: nullableBoolean,
    window_exterior_treatment_south: nullableBoolean,
    window_exterior_treatment_south_improved: nullableBoolean,
    window_exterior_treatment_west: nullableBoolean,
    window_exterior_treatment_west_improved: nullableBoolean,
    window_improvements: nullableBoolean,
    window_improvements_improved: nullableBoolean,
    window_energy_star: nullableBoolean,
    window_energy_star_improved: nullableBoolean,
  }),
})
const baseCaz = baseColl.keys({
  caz_name: optionalVarchar,
  caz_ambient_co: numericRegex,
  caz_poor_case_test: numericRegex,
  caz_notes: optionalVarchar,
  caz_ambient_co_improved: numericRegex,
  caz_poor_case_test_improved: numericRegex,
  caz_notes_improved: optionalVarchar,
})

const baseConcern = baseColl.keys({
  concern_summary: optionalVarchar,
  concern_detail: optionalVarchar,
})

const financingBase = Joi.object({
  closing_cost: optionalString,
  contact_info: optionalString,
  description: optionalString,
  eligibility: optionalString,
  max_purchase: optionalString,
  min_cash_down: numericRegex,
  min_fico_score: numericRegex,
  min_purchase: optionalString,
  rate: numericRegex,
  term: numericRegex,
  title: Joi.string(),
  deleted_at: Joi.date().allow(null),
})

const createFinancing = {
  rate: Joi.number().min(0).required(),
  term: Joi.number().min(0).required(),
  title: Joi.string().required(),
};

const financingTemplate = financingBase.keys({
  type: Joi.string().only('account', 'company').required(),
  account_id: Joi.when('type', {
    is: 'account',
    then: requiredInt,
  }),
  company_id: Joi.when('type', {
    is: 'company',
    then: requiredInt
  })
}).xor('company_id', 'account_id')

const collectionBase = baseJob.keys({
  order: Joi.number(),
  uuid: requiredUuid,
  deleted_at: Joi.date().allow(null)
})

const jobFinancing = financingBase.keys({
  order: Joi.number(),
  uuid: requiredUuid,
  job_id: requiredInt,
  from_financing_template_id: optionalInt,
  total_cost: numericRegex,
  cash_down: numericRegex,
  is_shown: bool,
  deleted_at: Joi.date().allow(null)
})

const accountBase = Joi.object().keys({
  first_name: optionalString,
  last_name: optionalString,
  email: optionalString,
  phone_number: optionalString,
  title: optionalString,
  certifications: optionalString,
  doe_assessor_id: optionalString,
  hours_of_operation: optionalString,
  gets_newsletter: bool
})

const captionRowBase = collectionBase.keys({
  caption: optionalString,
  left_photo_uuid: Joi.string().guid().allow('', null),
  left_photo_name: optionalString,
  left_photo_url: optionalString,
  left_photo_width: nullableInt,
  left_photo_height: nullableInt,
  right_photo_uuid: Joi.string().guid().allow('', null),
  right_photo_name: optionalString,
  right_photo_url: optionalString,
  right_photo_width: nullableInt,
  right_photo_height: nullableInt,
})

const jobBase = Joi.object().keys({
  version: Joi.number().allow(4, 5),
  home_phone: optionalString,
  service_time: Joi.date().allow(null),
  first_name: optionalString,
  last_name: optionalString,
  email: optionalString,
  address_1: optionalString,
  address_2: optionalString,
  city: optionalString,
  state: optionalString,
  zip: zipCode,
  renter_owner: bool.allow(null),
  coc_additional_info: optionalString,
  coc_work_performed_by: optionalString,
  coc_work_verified_by: optionalString

})

const recommendationBase = collectionBase.keys({
  title: optionalVarchar,
  cost: optionalVarchar,
  measure_code: optionalVarchar,
  homeowner_notes: optionalVarchar,
  contractor_notes: optionalVarchar,
  why_it_matters: optionalVarchar,
  status: Joi.number().only([0, 1, 2, 3]),
  deleted_at: Joi.date().allow(null)
})

const baseAccountsCompanies = Joi.object().keys({
  account_id: requiredInt,
  company_id: requiredInt,
  display_title: optionalString,
  display_email: optionalString
})

const baseActivityFeed = Joi.object().keys({
  job_id: requiredInt,
  account_id: optionalInt,
  message: optionalVarchar,
  file_name: optionalVarchar,
  file_uuid: optionalUuid,
  file_url: optionalVarchar,
  deleted_at: Joi.date().allow(null)
})

const baseActivityTracking = Joi.object().keys({
  job_id: requiredInt,
  account_id: optionalInt,
  unread_count: optionalInt,
  deleted_at: Joi.date().allow(null),
})

export default {

  'accountsCompanies/save': baseAccountsCompanies,

  'attic/create': baseAttic.keys({order: requiredInt}),
  'attic/save': baseAttic,

  'dhw/create': baseDhw.keys({order: requiredInt}),
  'dhw/save': baseDhw,

  'door/create': baseDoor.keys({order: requiredInt}),
  'door/save': baseDoor,

  'freezer/create': baseFreezer.keys({order: requiredInt}),
  'freezer/save': baseFreezer,

  'oven/create': baseOven.keys({order: requiredInt}),
  'oven/save': baseOven,

  'range/create': baseRange.keys({order: requiredInt}),
  'range/save': baseRange,

  'pv/create': basePV.keys({order: requiredInt}),
  'pv/save': basePV,

  'clothes_dryer/create': baseClothesDryer.keys({order: requiredInt}),
  'clothes_dryer/save': baseClothesDryer,

  'hvac/create': baseHvac.keys({
    order: requiredInt,
    hvac_upgrade_action: hvacUpgradeAction.required(),
    hvac_system_equipment_type: hvacSystemEquipmentType.required()
  }),
  'hvac/save': baseHvac,

  'refrigerator/create': baseRefrigerator.keys({order: requiredInt}),
  'refrigerator/save': baseRefrigerator,

  'vault/create': baseVault.keys({order: requiredInt}),
  'vault/save': baseVault,

  'wall/create': baseWall.keys({order: requiredInt}),
  'wall/save': baseWall,

  'window/create': baseWindow.keys({order: requiredInt}),
  'window/save': baseWindow,

  'caz/create': baseCaz.keys({order: requiredInt}),
  'caz/save': baseCaz,

  'caz_system/create': cazSystem.keys({
    caz_uuid: requiredUuid,
    hvac_uuid: Joi.string().guid(),
    dhw_uuid: Joi.string().guid(),
    oven_uuid: Joi.string().guid(),
    range_uuid: Joi.string().guid(),
    clothes_dryer_uuid: Joi.string().guid(),
  }).xor('hvac_uuid', 'dhw_uuid', 'oven_uuid', 'range_uuid', 'clothes_dryer_uuid'),
  'caz_system/save': cazSystem.keys({
    caz_uuid: Joi.string().guid()
  }),

  'basedata/save': baseJob.keys({
    year_built: optionalVarchar,
    conditioned_area: optionalVarchar,
    average_wall_height: optionalVarchar,
    house_length: optionalVarchar,
    house_width: optionalVarchar,
    floors_above_grade: optionalVarchar,
    number_of_occupants: optionalVarchar,
    type_of_home: Joi.any().only([null, "", "Apartment", "Condominium", "Single Family Detached", "Single Family Attached", "Mobile Home", "Don't Know"]),
    front_of_building_orientation: Joi.any().only([null, "", "North", "North East", "East", "South East", "South", "South West", "West", "North West"]),
    tuck_under_garage: Joi.any().only([null, "Yes", "No"]),
    garage_size: Joi.any().only([null, "1-car", "2-car", "3-car", "4-car", "5-car"]),
    programmable_thermostat_installed: Joi.any().only([null, "Yes", "No"]),
    heating_setpoint_high: optionalVarchar,
    heating_setpoint_high_improved: optionalVarchar,
    heating_setpoint_low: optionalVarchar,
    heating_setpoint_low_improved: optionalVarchar,
    cooling_setpoint_high: optionalVarchar,
    cooling_setpoint_high_improved: optionalVarchar,
    cooling_setpoint_low: optionalVarchar,
    cooling_setpoint_low_improved: optionalVarchar,
    total_number_of_light_bulbs: numericRegex,
    total_number_of_light_bulbs_improved: numericRegex,
    shared_walls_north: optionalVarchar,
    percent_of_ceilings_shared: optionalVarchar,
    percent_of_floors_shared: optionalVarchar,
    foundation_basement: numericRegex,
    foundation_above_grade_height: optionalVarchar,
    basement_wall_insulation: Joi.any().only([null, "", "None or Bare Walls", "Fiberglass blanket", "Unfinished frame wall with fiberglass batts", "Finished wall without Insulation", "Finished wall with Insulation", "Don't Know"]),
    crawlspace_insulation: Joi.any().only([null, "", "Crawlspace has insulation installed on the exterior wall area", "Crawlspace has insulation installed under only the living space floor", "Crawlspace is uninsulated", "Don't Know"]),
    skylight_area: optionalVarchar,
    blower_door_reading: optionalVarchar,
    blower_door_reading_improved: optionalVarchar,
    equivalent_nach: optionalVarchar,
    equivalent_nach_improved: optionalVarchar,
    conditioned_air_volume: optionalVarchar,
    effective_leakage_area: optionalVarchar,
    effective_leakage_area_improved: optionalVarchar,
    equivalent_ach_50: optionalVarchar,
    equivalent_ach_50_improved: optionalVarchar,
    modeled_basement_wall_area: optionalVarchar,
    basement_cavity_insulation: optionalVarchar,
    basement_cavity_insulation_improved: optionalVarchar,
    basement_continuous_insulation: optionalVarchar,
    basement_continuous_insulation_improved: optionalVarchar,
    basement_cavity_insulation_type: Joi.any().only([null, "", "Fiberglass or Rockwool Batt", "Blown Fiberglass or Rockwool", "Cellulose", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
    basement_cavity_insulation_type_improved: Joi.any().only([null, "", "Fiberglass or Rockwool Batt", "Blown Fiberglass or Rockwool", "Cellulose", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
    basement_continuous_insulation_type: Joi.any().only([null, "", "Fiberglass Drape", "Rigid XPS", "Rigid EPS", "Rigid Polyisocyanurate", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
    basement_continuous_insulation_type_improved: Joi.any().only([null, "", "Fiberglass Drape", "Rigid XPS", "Rigid EPS", "Rigid Polyisocyanurate", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
    floor_cavity_insulation: optionalVarchar,
    floor_cavity_insulation_improved: optionalVarchar,
    floor_continuous_insulation: optionalVarchar,
    floor_continuous_insulation_improved: optionalVarchar,
    floor_cavity_insulation_type: Joi.any().only([null, "", "Fiberglass or Rockwool Batt", "Blown Fiberglass or Rockwool", "Cellulose", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
    floor_cavity_insulation_type_improved: Joi.any().only([null, "", "Fiberglass or Rockwool Batt", "Blown Fiberglass or Rockwool", "Cellulose", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
    floor_continuous_insulation_type: Joi.any().only([null, "", "Fiberglass Drape", "Rigid XPS", "Rigid EPS", "Rigid Polyisocyanurate", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
    floor_continuous_insulation_type_improved: Joi.any().only([null, "", "Fiberglass Drape", "Rigid XPS", "Rigid EPS", "Rigid Polyisocyanurate", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
    modeled_floor_area: optionalVarchar,
    shared_walls_east: optionalVarchar,
    shared_walls_south: optionalVarchar,
    shared_walls_west: optionalVarchar,
    foundation_crawlspace: numericRegex,
    foundation_slab: numericRegex,
    percent_cfls_or_leds: Joi.any().only([null, "", "0%", "1-25%", "26-50%", "51-75%", "76-99%", "100%", "Don't Know"]),
    crawl_cavity_insulation: optionalVarchar,
    crawl_cavity_insulation_improved: optionalVarchar,
    crawl_wall_insulation: optionalVarchar,
    crawl_wall_insulation_improved: optionalVarchar,
    crawl_cavity_insulation_type: Joi.any().only([null, "", "Fiberglass or Rockwool Batt", "Blown Fiberglass or Rockwool", "Cellulose", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
    crawl_cavity_insulation_type_improved: Joi.any().only([null, "", "Fiberglass or Rockwool Batt", "Blown Fiberglass or Rockwool", "Cellulose", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
    crawl_wall_insulation_type: Joi.any().only([null, "", "Fiberglass Drape", "Rigid XPS", "Rigid EPS", "Rigid Polyisocyanurate", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
    crawl_wall_insulation_type_improved: Joi.any().only([null, "", "Fiberglass Drape", "Rigid XPS", "Rigid EPS", "Rigid Polyisocyanurate", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Other"]),
    modeled_crawl_wall_area: optionalVarchar,
    modeled_crawl_floor_area: optionalVarchar,
    crawlspace_type: Joi.any().only([null, "Unvented - Unconditioned Crawl", "Vented - Year Round", "Vented - Summer Only", "Conditioned Crawl"]),
    crawlspace_type_improved: Joi.any().only([null, "Unvented - Unconditioned Crawl", "Vented - Year Round", "Vented - Summer Only", "Conditioned Crawl"]),
    clothes_washer_type: Joi.any().only([null, "", "Front Load", "Top Load", "No Clothes Washer"]),
    clothes_washer_type_improved: Joi.any().only([null, "No Improvement", "Front Load", "Top Load", "No Clothes Washer"]),
    clothes_washer_energy_star: Joi.any().only([null, "Yes", "No"]),
    clothes_washer_energy_star_improved: Joi.any().only([null, "Yes", "No"]),
    clothes_washer_manufacturer: Joi.any().only([null, "", "Unknown", "Amana", "Asko", "Bosch", "Fridgidaire", "GE", "Hotpoint", "LG", "Maytag", "Samsung", "Sears", "Westinghouse", "Whirlpool", "Other"]),
    clothes_washer_manufacturer_improved: Joi.any().only([null, "", "Unknown", "Amana", "Asko", "Bosch", "Fridgidaire", "GE", "Hotpoint", "LG", "Maytag", "Samsung", "Sears", "Westinghouse", "Whirlpool", "Other"]),
    clothes_washer_model: optionalVarchar,
    clothes_washer_model_improved: optionalVarchar,
    clothes_washer_mef: optionalVarchar,
    clothes_washer_mef_improved: optionalVarchar,
    clothes_washer_energy_usage_improved: numericRegex,
    clothes_washer_water_usage_improved: numericRegex,
    dishwasher_energy_star: Joi.any().only([null, "Yes", "No"]),
    dishwasher_energy_star_improved: Joi.any().only([null, "Yes", "No"]),
    dishwasher_energy_factor: optionalVarchar,
    dishwasher_energy_factor_improved: optionalVarchar,
    dishwasher_energy_usage_improved: optionalVarchar,
    dishwasher_water_usage_improved: optionalVarchar,
    percent_cfl_or_led: optionalVarchar,
    percent_cfl_or_led_improved: optionalVarchar,
    wind_zone: Joi.any().only([null, "1", "2", "3", "4"]),
    shielding: Joi.any().only([null, "Well-Shielded", "Normal", "Exposed"]),
    n_factor: optionalVarchar,
    number_of_bedrooms: optionalVarchar,
    dishwasher_model: optionalVarchar,
    dishwasher_model_improved: optionalVarchar,
    dishwasher_manufacturer: Joi.any().only([null, "", "Unknown", "Amana", "Asko", "Bosch", "Fridgidaire", "GE", "Hotpoint", "KitchenAid", "LG", "Maytag", "Samsung", "Sears", "Thermador", "Whirlpool", "Other"]),
    dishwasher_manufacturer_improved: Joi.any().only([null, "", "Unknown", "Amana", "Asko", "Bosch", "Fridgidaire", "GE", "Hotpoint", "KitchenAid", "LG", "Maytag", "Samsung", "Sears", "Thermador", "Whirlpool", "Other"]),
    dishwasher_model_year: optionalVarchar,
    dishwasher_model_year_improved: optionalVarchar,
    clothes_washer_model_year: optionalVarchar,
    clothes_washer_model_year_improved: optionalVarchar,
    number_of_incandescents: optionalVarchar,
    number_of_incandescents_improved: optionalVarchar,
    number_of_cfls_installed: optionalVarchar,
    number_of_cfls_or_leds: optionalVarchar,
    number_of_cfls_or_leds_improved: optionalVarchar,
    hot_tub: Joi.any().only([null, "Yes", "No"]),
    pool: Joi.any().only([null, "Yes", "No"]),
    pool_pump_type: Joi.any().only([null, "", "Single Speed", "Two Speed", "Variable Speed", "No Pool Pump"]),
    pool_pump_type_improved: Joi.any().only([null, "", "Single Speed", "Two Speed", "Variable Speed", "No Pool Pump"]),
    pool_pump_horsepower: Joi.any().only([null, "", "0.5", "0.75", "1", "1.5", "2", "3"]),
    pool_pump_horsepower_improved: Joi.any().only([null, "", "0.5", "0.75", "1", "1.5", "2", "3"]),
    basement_heating: Joi.any().only([null, "Intentional", "Intentional w/ continuous circulation", "Incidental-Desired (e.g. leaky ducts)", "None or Undesired Incidental"]),
    basement_heating_improved: Joi.any().only([null, "Intentional", "Intentional w/ continuous circulation", "Incidental-Desired (e.g. leaky ducts)", "None or Undesired Incidental"]),
    basement_cooling: Joi.any().only([null, "Intentional", "Intentional w/ continuous circulation", "Incidental-Desired (e.g. leaky ducts)", "None or Undesired Incidental"]),
    basement_cooling_improved: Joi.any().only([null, "Intentional", "Intentional w/ continuous circulation", "Incidental-Desired (e.g. leaky ducts)", "None or Undesired Incidental"]),
    pool_size: optionalVarchar,
    pool_pump_turnover: optionalVarchar,
    pool_pump_turnover_improved: optionalVarchar,
    pool_pump_hours: optionalVarchar,
    pool_pump_hours_improved: optionalVarchar,
    pool_pump_manufacturer: Joi.any().only([null, "", "Pentair", "Other"]),
    pool_pump_manufacturer_improved: Joi.any().only([null, "", "Pentair", "Other"]),
    pool_pump_model: optionalVarchar,
    pool_pump_model_improved: optionalVarchar,
    pool_pump_days_per_year: optionalVarchar,
    pool_pump_days_per_year_improved: optionalVarchar,
    dishwasher_installed: Joi.any().only([null, "Yes", "No"]),
    dishwasher_installed_improved: Joi.any().only([null, "No Improvement", "Yes", "No"]),
    modeled_basement_floor_area: optionalVarchar,
    modeled_basement_perimeter: optionalVarchar,
    includes_basement: Joi.any().only([null, "Yes", "No"]),
    utility_price_natural_gas: optionalVarchar,
    utility_price_propane: optionalVarchar,
    utility_price_fuel_oil: optionalVarchar,
    utility_price_electricity: optionalVarchar,
    heating_design_load: optionalVarchar,
    heating_design_load_improved: optionalVarchar,
    cooling_sensible_design_load: optionalVarchar,
    cooling_sensible_design_load_improved: optionalVarchar,
    cooling_latent_design_load: optionalVarchar,
    cooling_latent_design_load_improved: optionalVarchar,
    design_temp_winter_outdoor: optionalVarchar,
    design_temp_summer_outdoor: optionalVarchar,
    design_temp_winter_indoor: optionalVarchar,
    design_temp_summer_indoor: optionalVarchar,
    utility_price_wood: optionalVarchar,
    utility_price_pellets: optionalVarchar,
    number_of_units: optionalVarchar,
    number_of_leds: optionalVarchar,
    number_of_leds_improved: optionalVarchar,
    crawlspace_rim_joist_length: optionalVarchar,
    crawlspace_rim_joist_treatment: Joi.any().only([null, "Same as Crawl Wall", "Separately"]),
    crawlspace_rim_joist_treatment_improved: Joi.any().only([null, "Same as Crawl Wall", "Separately"]),
    crawlspace_rim_joist_insulation: optionalVarchar,
    crawlspace_rim_joist_insulation_improved: optionalVarchar,
    crawlspace_rim_joist_insulation_type: Joi.any().only([null, "", "Fiberglass or Rockwool Batt", "Blown Fiberglass or Rockwool", "Cellulose", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Rigid XPS", "Rigid EPS", "Rigid Polyisocyanurate", "Other"]),
    crawlspace_rim_joist_insulation_type_improved: Joi.any().only([null, "", "Fiberglass or Rockwool Batt", "Blown Fiberglass or Rockwool", "Cellulose", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Rigid XPS", "Rigid EPS", "Rigid Polyisocyanurate", "Other"]),
    basement_rim_joist_length: optionalVarchar,
    basement_rim_joist_treatment: Joi.any().only([null, "Same as Basement Wall", "Separately"]),
    basement_rim_joist_treatment_improved: Joi.any().only([null, "Same as Basement Wall", "Separately"]),
    basement_rim_joist_insulation: optionalVarchar,
    basement_rim_joist_insulation_improved: optionalVarchar,
    basement_rim_joist_insulation_type: Joi.any().only([null, "", "Fiberglass or Rockwool Batt", "Blown Fiberglass or Rockwool", "Cellulose", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Rigid XPS", "Rigid EPS", "Rigid Polyisocyanurate", "Other"]),
    basement_rim_joist_insulation_type_improved: Joi.any().only([null, "", "Fiberglass or Rockwool Batt", "Blown Fiberglass or Rockwool", "Cellulose", "Open Cell Spray Foam", "Closed Cell Spray Foam", "Rigid XPS", "Rigid EPS", "Rigid Polyisocyanurate", "Other"]),
    demand_k_w: optionalVarchar,
    demand_k_w_improved: optionalVarchar,
    demand_k_w_savings: optionalVarchar,
    caz_max_ambient_co: optionalVarchar,
    caz_max_ambient_co_improved: optionalVarchar,
    ashrae_62_2: Joi.any().only([null, "Yes", "No"]),
    ashrae_kitchen_fan_cfm: optionalVarchar,
    ashrae_kitchen_fan_cfm_improved: optionalVarchar,
    ashrae_kitchen_window: Joi.any().only([null, "Yes", "No"]),
    ashrae_kitchen_window_improved: Joi.any().only([null, "Yes", "No"]),
    ashrae_number_of_bathrooms: Joi.any().only([null, "1", "2", "3", "4"]),
    ashrae_bathroom_fan_1_cfm: optionalVarchar,
    ashrae_bathroom_fan_1_cfm_improved: optionalVarchar,
    ashrae_bathroom_1_window: Joi.any().only([null, "Yes", "No"]),
    ashrae_bathroom_1_window_improved: Joi.any().only([null, "Yes", "No"]),
    ashrae_bathroom_fan_2_cfm: optionalVarchar,
    ashrae_bathroom_fan_2_cfm_improved: optionalVarchar,
    ashrae_bathroom_2_window: Joi.any().only([null, "Yes", "No"]),
    ashrae_bathroom_2_window_improved: Joi.any().only([null, "Yes", "No"]),
    ashrae_bathroom_fan_3_cfm: optionalVarchar,
    ashrae_bathroom_fan_3_cfm_improved: optionalVarchar,
    ashrae_bathroom_3_window: Joi.any().only([null, "Yes", "No"]),
    ashrae_bathroom_3_window_improved: Joi.any().only([null, "Yes", "No"]),
    ashrae_bathroom_fan_4_cfm: optionalVarchar,
    ashrae_bathroom_fan_4_cfm_improved: optionalVarchar,
    ashrae_bathroom_4_window: Joi.any().only([null, "Yes", "No"]),
    ashrae_bathroom_4_window_improved: Joi.any().only([null, "Yes", "No"]),
    ashrae_required_additional_cfm: optionalVarchar,
    ashrae_required_additional_cfm_improved: optionalVarchar,
    ashrae_minimum_cfm50_improved: optionalVarchar,
    blower_door_test_performed: Joi.any().only([null, "Tested", "Estimate"]),
    blower_door_test_performed_improved: Joi.any().only([null, "Tested", "Estimate"]),
    window_venting_used: Joi.any().only([null, "Yes", "No"]),
    window_venting_used_improved: Joi.any().only([null, "Yes", "No"]),


    touched_fields: Joi.object({
      type_of_home: nullableBoolean,
      clothes_washer_energy_usage_improved: nullableBoolean,
      clothes_washer_water_usage_improved: nullableBoolean,
      heating_setpoint_high_improved: nullableBoolean,
      heating_setpoint_low_improved: nullableBoolean,
      cooling_setpoint_high_improved: nullableBoolean,
      cooling_setpoint_low_improved: nullableBoolean,
      total_number_of_light_bulbs: nullableBoolean,
      total_number_of_light_bulbs_improved: nullableBoolean,
      blower_door_reading: nullableBoolean,
      blower_door_reading_improved: nullableBoolean,
      equivalent_nach: nullableBoolean,
      equivalent_nach_improved: nullableBoolean,
      conditioned_air_volume: nullableBoolean,
      effective_leakage_area: nullableBoolean,
      effective_leakage_area_improved: nullableBoolean,
      equivalent_ach_50: nullableBoolean,
      equivalent_ach_50_improved: nullableBoolean,
      modeled_basement_wall_area: nullableBoolean,
      basement_cavity_insulation: nullableBoolean,
      basement_cavity_insulation_improved: nullableBoolean,
      basement_continuous_insulation: nullableBoolean,
      basement_continuous_insulation_improved: nullableBoolean,
      basement_cavity_insulation_type: nullableBoolean,
      basement_cavity_insulation_type_improved: nullableBoolean,
      basement_continuous_insulation_type: nullableBoolean,
      basement_continuous_insulation_type_improved: nullableBoolean,
      floor_cavity_insulation: nullableBoolean,
      floor_cavity_insulation_improved: nullableBoolean,
      floor_continuous_insulation: nullableBoolean,
      floor_continuous_insulation_improved: nullableBoolean,
      floor_cavity_insulation_type: nullableBoolean,
      floor_cavity_insulation_type_improved: nullableBoolean,
      floor_continuous_insulation_type: nullableBoolean,
      floor_continuous_insulation_type_improved: nullableBoolean,
      modeled_floor_area: nullableBoolean,
      crawl_cavity_insulation: nullableBoolean,
      crawl_cavity_insulation_improved: nullableBoolean,
      crawl_wall_insulation: nullableBoolean,
      crawl_wall_insulation_improved: nullableBoolean,
      crawl_cavity_insulation_type: nullableBoolean,
      crawl_cavity_insulation_type_improved: nullableBoolean,
      crawl_wall_insulation_type: nullableBoolean,
      crawl_wall_insulation_type_improved: nullableBoolean,
      modeled_crawl_wall_area: nullableBoolean,
      modeled_crawl_floor_area: nullableBoolean,
      crawlspace_type: nullableBoolean,
      crawlspace_type_improved: nullableBoolean,
      clothes_washer_type: nullableBoolean,
      clothes_washer_type_improved: nullableBoolean,
      clothes_washer_energy_star: nullableBoolean,
      clothes_washer_energy_star_improved: nullableBoolean,
      clothes_washer_manufacturer: nullableBoolean,
      clothes_washer_manufacturer_improved: nullableBoolean,
      clothes_washer_model: nullableBoolean,
      clothes_washer_model_improved: nullableBoolean,
      clothes_washer_mef: nullableBoolean,
      clothes_washer_mef_improved: nullableBoolean,
      dishwasher_energy_star_improved: nullableBoolean,
      dishwasher_energy_factor: nullableBoolean,
      dishwasher_energy_factor_improved: nullableBoolean,
      dishwasher_energy_usage_improved: nullableBoolean,
      dishwasher_water_usage_improved: nullableBoolean,
      percent_cfl_or_led: nullableBoolean,
      percent_cfl_or_led_improved: nullableBoolean,
      wind_zone: nullableBoolean,
      n_factor: nullableBoolean,
      dishwasher_model: nullableBoolean,
      dishwasher_model_improved: nullableBoolean,
      dishwasher_manufacturer: nullableBoolean,
      dishwasher_manufacturer_improved: nullableBoolean,
      dishwasher_model_year: nullableBoolean,
      dishwasher_model_year_improved: nullableBoolean,
      clothes_washer_model_year: nullableBoolean,
      clothes_washer_model_year_improved: nullableBoolean,
      number_of_incandescents: nullableBoolean,
      number_of_incandescents_improved: nullableBoolean,
      number_of_cfls_or_leds: nullableBoolean,
      number_of_cfls_or_leds_improved: nullableBoolean,
      pool_pump_type_improved: nullableBoolean,
      pool_pump_horsepower_improved: nullableBoolean,
      basement_heating_improved: nullableBoolean,
      basement_cooling_improved: nullableBoolean,
      pool_size: nullableBoolean,
      pool_pump_turnover: nullableBoolean,
      pool_pump_turnover_improved: nullableBoolean,
      pool_pump_hours: nullableBoolean,
      pool_pump_hours_improved: nullableBoolean,
      pool_pump_manufacturer: nullableBoolean,
      pool_pump_manufacturer_improved: nullableBoolean,
      pool_pump_model: nullableBoolean,
      pool_pump_model_improved: nullableBoolean,
      pool_pump_days_per_year: nullableBoolean,
      pool_pump_days_per_year_improved: nullableBoolean,
      dishwasher_installed: nullableBoolean,
      dishwasher_installed_improved: nullableBoolean,
      modeled_basement_floor_area: nullableBoolean,
      modeled_basement_perimeter: nullableBoolean,
      utility_price_natural_gas: nullableBoolean,
      utility_price_propane: nullableBoolean,
      utility_price_fuel_oil: nullableBoolean,
      utility_price_electricity: nullableBoolean,
      heating_design_load: nullableBoolean,
      heating_design_load_improved: nullableBoolean,
      cooling_sensible_design_load: nullableBoolean,
      cooling_sensible_design_load_improved: nullableBoolean,
      cooling_latent_design_load: nullableBoolean,
      cooling_latent_design_load_improved: nullableBoolean,
      design_temp_winter_outdoor: nullableBoolean,
      design_temp_summer_outdoor: nullableBoolean,
      design_temp_winter_indoor: nullableBoolean,
      design_temp_summer_indoor: nullableBoolean,
      utility_price_wood: nullableBoolean,
      utility_price_pellets: nullableBoolean,
      number_of_leds: nullableBoolean,
      number_of_leds_improved: nullableBoolean,
      crawlspace_rim_joist_length: nullableBoolean,
      crawlspace_rim_joist_treatment: nullableBoolean,
      crawlspace_rim_joist_treatment_improved: nullableBoolean,
      crawlspace_rim_joist_insulation: nullableBoolean,
      crawlspace_rim_joist_insulation_improved: nullableBoolean,
      crawlspace_rim_joist_insulation_type: nullableBoolean,
      crawlspace_rim_joist_insulation_type_improved: nullableBoolean,
      basement_rim_joist_length: nullableBoolean,
      basement_rim_joist_treatment: nullableBoolean,
      basement_rim_joist_treatment_improved: nullableBoolean,
      basement_rim_joist_insulation: nullableBoolean,
      basement_rim_joist_insulation_improved: nullableBoolean,
      basement_rim_joist_insulation_type: nullableBoolean,
      basement_rim_joist_insulation_type_improved: nullableBoolean,
      demand_k_w: nullableBoolean,
      demand_k_w_improved: nullableBoolean,
      demand_k_w_savings: nullableBoolean,
      ashrae_62_2: nullableBoolean,
      ashrae_kitchen_fan_cfm: nullableBoolean,
      ashrae_kitchen_fan_cfm_improved: nullableBoolean,
      ashrae_kitchen_window: nullableBoolean,
      ashrae_kitchen_window_improved: nullableBoolean,
      ashrae_number_of_bathrooms: nullableBoolean,
      ashrae_bathroom_fan_1_cfm: nullableBoolean,
      ashrae_bathroom_fan_1_cfm_improved: nullableBoolean,
      ashrae_bathroom_1_window: nullableBoolean,
      ashrae_bathroom_1_window_improved: nullableBoolean,
      ashrae_bathroom_fan_2_cfm: nullableBoolean,
      ashrae_bathroom_fan_2_cfm_improved: nullableBoolean,
      ashrae_bathroom_2_window: nullableBoolean,
      ashrae_bathroom_2_window_improved: nullableBoolean,
      ashrae_bathroom_fan_3_cfm: nullableBoolean,
      ashrae_bathroom_fan_3_cfm_improved: nullableBoolean,
      ashrae_bathroom_3_window: nullableBoolean,
      ashrae_bathroom_3_window_improved: nullableBoolean,
      ashrae_bathroom_fan_4_cfm: nullableBoolean,
      ashrae_bathroom_fan_4_cfm_improved: nullableBoolean,
      ashrae_bathroom_4_window: nullableBoolean,
      ashrae_bathroom_4_window_improved: nullableBoolean,
      ashrae_required_additional_cfm: nullableBoolean,
      ashrae_required_additional_cfm_improved: nullableBoolean,
      ashrae_minimum_cfm50_improved: nullableBoolean,
      blower_door_test_performed: nullableBoolean,
      blower_door_test_performed_improved: nullableBoolean,
      window_venting_used: nullableBoolean,
      window_venting_used_improved: nullableBoolean,
    }),
  }),

  'concern/create': baseConcern.keys({order: requiredInt}),
  'concern/save': baseConcern,

  'health/save': baseJob.keys({
    health_ambient_carbon_monoxide: Joi.any().only(HEALTH_OPTIONS),
    health_natural_condition_spillage: Joi.any().only(HEALTH_OPTIONS),
    health_worst_case_depressurization: Joi.any().only(HEALTH_OPTIONS),
    health_worst_case_spillage: Joi.any().only(HEALTH_OPTIONS),
    health_undiluted_flue_co: Joi.any().only(HEALTH_OPTIONS),
    health_draft_pressure: Joi.any().only(HEALTH_OPTIONS),
    health_gas_leak: Joi.any().only(HEALTH_OPTIONS),
    health_venting: Joi.any().only(HEALTH_OPTIONS),
    health_mold_moisture: Joi.any().only(HEALTH_OPTIONS),
    health_radon: Joi.any().only(HEALTH_OPTIONS),
    health_asbestos: Joi.any().only(HEALTH_OPTIONS),
    health_lead: Joi.any().only(HEALTH_OPTIONS),
    health_electrical: Joi.any().only(HEALTH_OPTIONS)
  }),

  'invitations/create': Joi.object({
    email: Joi.string().email().required(),
    company_id: requiredInt,
    title: Joi.string(),
    role: Joi.any().only(['admin', 'user']).required()
  }),

  'invitations/save': Joi.object({
    id: requiredInt,
    deleted_at: Joi.date().allow(null)
  }),

  'companies/create': Joi.object({
    name: Joi.string().required(),
    website: optionalString,
    phone: optionalString,
    source: optionalString,
  }),

  'jobs/create': jobBase.keys({
    from_template_id: optionalInt,
    is_template: bool.required(),
    account_id: Joi.when('is_template', {
      is: 1,
      then: Joi.number().allow(null),
      otherwise: requiredInt
    }),
    company_id: Joi.when('is_template', {
      is: 1,
      then: Joi.number().allow(null),
      otherwise: requiredInt
    }),
    program_id: requiredInt,
    stage_id: Joi.when('is_template', {
      is: 0,
      then: requiredInt
    }),
  }),

  'jobs/save': jobBase.keys({
    id: requiredInt,
    account_id: Joi.when('is_template', {
      is: 0,
      then: requiredInt,
      otherwise: optionalInt
    }),
    stage_id: optionalInt,
    company_id: optionalInt,
    has_unmodeled_changes: bool,
    deleted_at: Joi.date().allow(null)
  }),

  'activity_feed/create': baseActivityFeed.keys({
    uuid: requiredUuid,
    job_id: requiredInt
  }),
  'activity_feed/save': baseActivityFeed.keys({uuid: requiredUuid}),

  'activity_tracking/create': baseActivityTracking.keys({
    job_id: requiredInt,
    account_id: requiredInt
  }),
  'activity_tracking/save': baseActivityTracking.keys({
    job_id: requiredInt,
    account_id: requiredInt
  }),

  'financing_templates/create': financingTemplate.keys(createFinancing),

  'financing_templates/save': financingTemplate.keys({id: requiredInt}),

  'job_financing/create': jobFinancing.keys({
    ...createFinancing,
    order: requiredInt
  }),

  'job_financing/save': jobFinancing,

  'recommendation_caption_rows/create': captionRowBase.keys({
    order: requiredInt,
    recommendation_uuid: requiredUuid,
  }),

  'recommendation_caption_rows/save': captionRowBase,

  'recommendations/create': recommendationBase.keys({
    order: Joi.number().required(),
    rec_definition_id: Joi.number().only([19]).required(),
    status: Joi.number().only([0, 1, 2, 3]).required()
  }),

  'recommendations/save': recommendationBase,

  'reports/save': baseJob.keys({
    cover_photo_uuid: Joi.string().max(36),
    cover_photo_name: Joi.string().max(1024).allow(''),
    cover_photo_url: Joi.string().max(1024).allow(''),
    serviced_by_title: Joi.string().max(255).allow(''),
    service_date_title: Joi.string().max(255).allow(''),
    cover_text_area: optionalString,
    toggled_pages: Joi.string().max(255).allow(''),
    toggled_elements: Joi.string().max(255).allow(''),
    concerns_sidebar: optionalString,
    solutions_title: optionalString,
    approximate_cost_text: optionalString,
    estimated_savings_text: optionalString,
    safety_overview: optionalString,
    additional_notes_overview_title: Joi.string().max(255).allow(''),
    additional_notes_overview: optionalString,
    title_cover: Joi.string().max(50).allow(''),
    title_concerns: Joi.string().max(50).allow(''),
    title_solutions: Joi.string().max(50).allow(''),
    title_financing: Joi.string().max(50).allow(''),
    title_additional: Joi.string().max(50).allow(''),
    title_rebates: Joi.string().max(50).allow(''),
    title_tech_specs: Joi.string().max(50).allow(''),
    title_metrics: Joi.string().max(50).allow(''),
    title_glossary: Joi.string().max(50).allow(''),
    title_coc: Joi.string().max(50).allow(''),
    page_cover: bool,
    page_financing: bool,
    page_concerns: bool,
    page_solutions: bool,
    page_upgrade_details: bool,
    page_health: bool,
    page_additional_notes: bool,
    page_rebates: bool,
    page_tech_specs: bool,
    page_metrics: bool,
    page_glossary: bool,
    page_coc: bool,
    element_costs: Joi.number().integer(),
    element_savings: Joi.number().integer(),
    element_sir: Joi.number().integer(),

    element_co2: bool,
    element_photos: bool,
    element_homeowner_notes: bool,
    element_contractor_notes: bool,
    element_now_and_goal: bool,
    element_why_it_matters: bool,
    element_program_info: bool,
    title_hes: Joi.string().max(50).allow(''),
    page_hes: bool,
    theme: Joi.number(),
    page_sort_order: Joi.array().items(
      PAGE_SORT.map(page => Joi.string().valid(page).required())
    ).length(PAGE_SORT.length),
    element_sort_order: Joi.array().items(
      ELEMENT_SORT.map(page => Joi.string().valid(page).required())
    ).length(ELEMENT_SORT.length),
  }),

  'utilities/save': baseJob.keys({
    bill_entry_type: Joi.any().only([null, "Detailed", "Simple", "No Bills"]),
    electric_utility_provider_name: optionalVarchar,
    electric_account_number: optionalVarchar,
    highest_monthly_summer_electric_bill: optionalVarchar,
    lowest_monthly_electric_bill: optionalVarchar,
    electric_bill_units: Joi.any().only([null, "kWh", "Dollars"]),
    start_electric_date_1: Joi.date().allow(null),
    end_electric_date_1: Joi.date().allow(null),
    end_electric_bill_1: optionalVarchar,
    end_electric_date_2: Joi.date().allow(null),
    end_electric_bill_2: optionalVarchar,
    end_electric_date_3: Joi.date().allow(null),
    end_electric_bill_3: optionalVarchar,
    end_electric_date_4: Joi.date().allow(null),
    end_electric_bill_4: optionalVarchar,
    end_electric_date_5: Joi.date().allow(null),
    end_electric_bill_5: optionalVarchar,
    end_electric_date_6: Joi.date().allow(null),
    end_electric_bill_6: optionalVarchar,
    end_electric_date_7: Joi.date().allow(null),
    end_electric_bill_7: optionalVarchar,
    end_electric_date_8: Joi.date().allow(null),
    end_electric_bill_8: optionalVarchar,
    end_electric_date_9: Joi.date().allow(null),
    end_electric_bill_9: optionalVarchar,
    end_electric_date_10: Joi.date().allow(null),
    end_electric_bill_10: optionalVarchar,
    end_electric_date_11: Joi.date().allow(null),
    end_electric_bill_11: optionalVarchar,
    end_electric_date_12: Joi.date().allow(null),
    end_electric_bill_12: optionalVarchar,
    start_fuel_date_1: Joi.date().allow(null),
    end_fuel_date_1: Joi.date().allow(null),
    end_fuel_bill_1: optionalVarchar,
    end_fuel_date_2: Joi.date().allow(null),
    end_fuel_bill_2: optionalVarchar,
    end_fuel_date_3: Joi.date().allow(null),
    end_fuel_bill_3: optionalVarchar,
    end_fuel_date_4: Joi.date().allow(null),
    end_fuel_bill_4: optionalVarchar,
    end_fuel_date_5: Joi.date().allow(null),
    end_fuel_bill_5: optionalVarchar,
    end_fuel_date_6: Joi.date().allow(null),
    end_fuel_bill_6: optionalVarchar,
    end_fuel_date_7: Joi.date().allow(null),
    end_fuel_bill_7: optionalVarchar,
    end_fuel_date_8: Joi.date().allow(null),
    end_fuel_bill_8: optionalVarchar,
    end_fuel_date_9: Joi.date().allow(null),
    end_fuel_bill_9: optionalVarchar,
    end_fuel_date_10: Joi.date().allow(null),
    end_fuel_bill_10: optionalVarchar,
    end_fuel_date_11: Joi.date().allow(null),
    end_fuel_bill_11: optionalVarchar,
    end_fuel_date_12: Joi.date().allow(null),
    end_fuel_bill_12: optionalVarchar,
    primary_heating_fuel_type: Joi.any().only([null, "", "Natural Gas", "Electricity", "Fuel Oil", "Propane", "Wood", "Pellets", "Solar"]),
    fuel_utility_provider_name: optionalVarchar,
    fuel_account_number: optionalVarchar,
    highest_monthly_winter_electric_bill: optionalVarchar,
    highest_monthly_winter_natural_gas_bill: optionalVarchar,
    lowest_monthly_natural_gas_bill: optionalVarchar,
    simple_fuel_units: Joi.any().only([null, "Gallons", "Dollars"]),
    total_simple_fuel_used_in_last_12_months: optionalVarchar,
    fuel_bill_units: Joi.any().only([null, "Therms", "Gallons", "Dollars"]),
  }),

  'accounts/save': accountBase.keys({
    id: Joi.number().required()
  }),

  'companies/save': Joi.object({
    id: requiredInt,
    address_1: optionalString,
    address_2: optionalString,
    city: optionalString,
    state: optionalString,
    zip: optionalString,
    website: optionalString,
    phone: optionalString,
    company_photo_uuid: optionalString,
    company_photo_name: optionalString,
    company_photo_url: optionalString,
    hours_of_operation: optionalString
  }),

  // Non-standard validations:

  'snuggadmin/create-job-from-job': Joi.object({
    from_job_id: requiredInt,
    account_id: optionalInt,
    company_id: optionalInt,
    program_id: optionalInt,
  }),

  'update-jobs-stages': Joi.object({
    stage_id: requiredInt,
    company_id: requiredInt,
    job_ids: Joi.array().min(1).items(Joi.number().min(0)).required(),
  }),
  'mark-all-read': Joi.object({
    company_id: requiredInt,
    job_ids: Joi.array().min(1).items(Joi.number().min(0)).required(),
  }),

  // TODO: use enums and more specific validations
  'model-hes': Joi.object({
    job_id: Joi.number().required(),
    hpxml: Joi.string().required(),
    stage1: optionalString.only(Array.from(HPXML_STAGES.values())),
    stage2: optionalString.only(Array.from(HPXML_STAGES.values())),
    transaction_type: optionalString.only(['create', 'update']),
    doe_assessor_id: Joi.string().required(),
    hpxml_building_node: optionalString.only(['base', 'improved', 'both'])
  }),

  'update-password': Joi.object({
    password: Joi.string().required(),
    password_confirm: Joi.ref('password')
  }),

  'swap-order': baseJob.keys({
    uuid_a: requiredUuid,
    uuid_b: requiredUuid,
    table: Joi.string().only([
      'attic', 'caz', 'concern', 'dhw', 'door', 'freezer',
      'health', 'hvac', 'refrigerator', 'vault', 'wall', 'window',
      'recommendations', 'recommendationCaptionRows', 'jobFinancing'
    ])
  }),

  'update-billing': Joi.object({
    company_id: requiredInt,
    token: Joi.string().required(),
    card_name: Joi.string().required()
  }),

  // Optimiser Modeling Actions

  'om/model': Joi.object({
    job_id: Joi.number().required()
  }),

  'om/cancel': Joi.object({
    job_id: Joi.number().required(),
    is_calculating: Joi.number().required()
  }),

  empty: Joi.object({}),

  'sync-offline': Joi.object({
    updates: Joi.object().required(),
    creates: Joi.object().required(),
    url: Joi.string().required()
  }),

  'csv-download': Joi.object({
    jobIds: Joi.string().required()
  }),

  '/api/program-csv': Joi.object({
    startDate: Joi.date().allow(null),
    endDate: Joi.date().allow(null)
  })
}
